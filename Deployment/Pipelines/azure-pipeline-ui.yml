# Node.js with Vue
# Build a Node.js project that uses Vue.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  branches:
    include:
      - main
      - dev
  paths:
    include:
      - UI/*
      - Deployment/Pipelines/azure-pipeline-ui.yml

variables:
  DATE_COUNTER: $[counter(format('UI{0:yyyy}{0:MM}{0:dd}', pipeline.startTime), 1)]
  TEMPLATE_VERSION: $[format('v{0:yyyy}.{0:MM}.{0:dd}.{1}', pipeline.startTime, variables['DATE_COUNTER'])]

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Build
    displayName: "Build"

    jobs:
      - job: job_1
        displayName: "Building UI Project"

        steps:
          - task: replacetokens@3
            displayName: "Replace UI Version #"
            inputs:
              rootDirectory: "$(Build.SourcesDirectory)/UI/src/constants"
              targetFiles: "app.js"
              encoding: "auto"
              writeBOM: true
              actionOnMissing: "warn"
              keepToken: false
              tokenPrefix: "#{"
              tokenSuffix: "}#"
              useLegacyPattern: false
              enableTransforms: false
              enableTelemetry: true
          
          - script: cat "$(Build.SourcesDirectory)/UI/src/constants/app.js"
          
          - task: NodeTool@0
            inputs:
              versionSpec: "12.x"
            displayName: "Install Node.js"

          - script: rm -rf "UI/node_modules"
            displayName: "Purge node packages"
            continueOnError: true
            workingDirectory: $(Build.SourcesDirectory)

          - script: rm -rf "UI/package-lock.json"
            displayName: "Purge node package-lock file"
            continueOnError: true
            workingDirectory: $(Build.SourcesDirectory)

          - task: Npm@1
            displayName: "npm install"
            inputs:
              command: "custom"
              workingDir: "UI/"
              customCommand: "install --legacy-peer-deps --save"

          - task: Npm@1
            displayName: "npm build-storybook"
            inputs:
              command: "custom"
              workingDir: "UI/"
              customCommand: "run build-storybook"

          - task: replacetokens@3
            displayName: "Replace UI Version #"
            inputs:
              rootDirectory: "$(Build.SourcesDirectory)/UI/src/constants"
              targetFiles: "app.js"
              encoding: "auto"
              writeBOM: true
              actionOnMissing: "warn"
              keepToken: false
              tokenPrefix: "#{"
              tokenSuffix: "}#"
              useLegacyPattern: false
              enableTransforms: false
              enableTelemetry: true

          - task: Npm@1
            displayName: "npm build"
            inputs:
              command: "custom"
              workingDir: "UI/"
              customCommand: "run build"

          - task: ArchiveFiles@2
            displayName: "Archive storybook Files"
            inputs:
              rootFolderOrFile: "$(Build.SourcesDirectory)/UI/storybook-static"
              includeRootFolder: true
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-storybook.zip"
              replaceExistingArchive: true

          - task: CopyFiles@2
            inputs:
              SourceFolder: "$(Build.SourcesDirectory)/UI"
              Contents: "*.config.json"
              TargetFolder: "$(Build.SourcesDirectory)/UI/dist"

          - task: ArchiveFiles@2
            displayName: "Archive UI Files"
            inputs:
              rootFolderOrFile: "$(Build.SourcesDirectory)/UI/dist"
              includeRootFolder: true
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip"
              replaceExistingArchive: true

          - task: ArchiveFiles@2
            displayName: "Archive config Files"
            inputs:
              rootFolderOrFile: "$(Build.SourcesDirectory)/UI/config"
              includeRootFolder: true
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-config.zip"
              replaceExistingArchive: true

          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifacts"
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)"
              ArtifactName: "drop"
              publishLocation: "Container"
