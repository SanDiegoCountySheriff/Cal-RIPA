{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "functions": [
  ],
  "parameters": {
    "agency_county": {
      "type": "string"
    },
    "agency_abbreviation": {
      "type": "string"
    },
    "agency_type": {
      "type": "string"
    },
    "agency_ori": {
      "type": "string"
    },
    "application": {
      "defaultValue": "ripa",
      "type": "string"
    },
    "environment_type": {
      "type": "string",
      "defaultValue": "PROD"
    },
    "apim_sku": {
      "type": "string",
      "defaultValue": "Developer"
    },
    "enable_beats": {
      "type": "bool",
      "defaultValue": false
    },
    "modify_beat_id": {
      "type": "bool",
      "defaultValue": false
    },
    "beat_id_number_of_digits": {
      "type": "int",
      "defaultValue": 1
    },
    "enable_stop_debugger": {
      "type": "bool",
      "defaultValue": false
    },
    "display_reporting_email": {
      "defaultValue": false,
      "type": "bool"
    },
    "reporting_email_address": {
      "defaultValue": "",
      "type": "string"
    },
    "auth_tenant_id": {
      "type": "string"
    },
    "auth_authority": {
      "type": "string"
    },
    "auth_logout_url": {
      "defaultValue": "",
      "type": "string"
    },
    "use_officer_upn": {
      "type": "bool",
      "defaultValue": false
    },
    "doj_sftp_server": {
      "defaultValue": "",
      "type": "string"
    },
    "doj_sftp_server_key": {
      "defaultValue": "",
      "type": "string"
    },
    "doj_sftp_username": {
      "defaultValue": "",
      "type": "string"
    },
    "doj_sftp_password": {
      "defaultValue": "",
      "type": "string"
    },
    "doj_sftp_disabled": {
      "type": "string",
      "defaultValue": "false"
    },
    "auth_app_id": {
      "type": "string"
    },
    "auth_fqdn": {
      "type": "string"
    },
    "user_tags": {
      "type": "Object",
      "defaultValue": {}
    },
    "app_domain_type": {
      "type": "string"
    },
    "primary_domain": {
      "defaultValue": "cssa.cloud",
      "type": "string"
    },
    "app_cname_alias": {
      "defaultValue": "ripa",
      "type": "string"
    },
    "certificate_key_vault_rid": {
      "defaultValue": "",
      "type": "string"
    },
    "certificate_secret_name": {
      "defaultValue": "star-cssa-cloud",
      "type": "string"
    },
    "glocation": {
      "defaultValue": "Global",
      "type": "string"
    },
    "sites_user_fa_name": {
      "defaultValue": "userprofile-fa",
      "type": "string"
    },
    "storage_ep_suff": {
      "defaultValue": "core.usgovcloudapi.net",
      "type": "string"
    },
    "fa_hostnamessl_ep_suff": {
      "defaultValue": ".azurewebsites.us",
      "type": "string"
    },
    "fa_hostnamessl_scm_ep_suff": {
      "defaultValue": ".scm.azurewebsites.us",
      "type": "string"
    },
    "domain_fa_name": {
      "defaultValue": "domain-fa",
      "type": "string"
    },
    "stop_fa_name": {
      "defaultValue": "stop-fa",
      "type": "string"
    },
    "submission_fa_name": {
      "defaultValue": "submission-fa",
      "type": "string"
    },
    "textanalytics_fa_name": {
      "defaultValue": "textanalytics-fa",
      "type": "string"
    },
    "use32BitWorkerProcess": {
      "defaultValue": false,
      "type": "bool"
    },
    "linuxFxVersion": {
      "defaultValue": "dotnet|3.1",
      "type": "string"
    },
    "vaults_kv_name": {
      "defaultValue": "kv",
      "type": "string"
    },
    "components_ai_name": {
      "defaultValue": "ai",
      "type": "string"
    },
    "serverfarms_userprofile_ASP_name": {
      "defaultValue": "userprofile-fa-asp",
      "type": "string"
    },
    "serverfarms_domain_ASP_name": {
      "defaultValue": "domain-fa-asp",
      "type": "string"
    },
    "serverfarms_stop_ASP_name": {
      "defaultValue": "stop-fa-asp",
      "type": "string"
    },
    "serverfarms_submission_ASP_name": {
      "defaultValue": "submission-fa-asp",
      "type": "string"
    },
    "serverfarms_textanalytics_ASP_name": {
      "defaultValue": "textanalytics-fa-asp",
      "type": "string"
    },
    "virtualNetworks_vnet_name": {
      "defaultValue": "vnet",
      "type": "string"
    },
    "service_apim_name": {
      "defaultValue": "apim",
      "type": "string"
    },
    "databaseAccounts_cdb_name": {
      "defaultValue": "cdb",
      "type": "string"
    },
    "storageAccounts_uisa_name": {
      "defaultValue": "uisa",
      "type": "string"
    },
    "storageAccounts_ctsa_name": {
      "defaultValue": "ctsa",
      "type": "string"
    },
    "storageAccounts_functionssa_name": {
      "defaultValue": "fnsa",
      "type": "string"
    },
    "workspaces_laws_name": {
      "defaultValue": "laws",
      "type": "string"
    },
    "storageAccounts_nsgflowlogssa_name": {
      "defaultValue": "flsa",
      "type": "string"
    },
    "networkSecurityGroups_apim_nsg_name": {
      "defaultValue": "apim-nsg",
      "type": "string"
    },
    "networkSecurityGroups_vnet_cdb_subnet_nsg_name": {
      "defaultValue": "cdb-nsg",
      "type": "string"
    },
    "actionGroups_Application_Insights_Smart_Detection_name": {
      "defaultValue": "Application Insights Smart Detection",
      "type": "string"
    },
    "apim_publisherEmail": {
      "defaultValue": "support@cssa.cloud",
      "type": "string"
    },
    "apim_publisherName": {
      "defaultValue": "[concat(parameters('agency_abbreviation'), 'cssa-ripa')]",
      "type": "string"
    },
    "accounts_ripaTA_name": {
      "defaultValue": "ta",
      "type": "string"
    },
    "kv_tenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "metadata": {
        "description": "Specifies the Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Get it by using Get-AzSubscription cmdlet."
      }
    },
    "kv_secretsPermissions": {
      "type": "array",
      "defaultValue": [ "Get", "List" ],
      "metadata": {
        "description": "Specifies the permissions to secrets in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."
      }
    },
    "kv_keysPermissions": {
      "type": "array",
      "defaultValue": [ "Get", "List" ],
      "metadata": {
        "description": "Specifies the permissions to keys in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."
      }
    },
    "kv_CertPermissions": {
      "type": "array",
      "defaultValue": [ "Get", "List" ],
      "metadata": {
        "description": "Specifies the permissions to keys in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."
      }
    },
    "vaults_kv_secrets_key0": {
      "type": "string",
      "defaultValue": "ServiceBusConnection"
    },
    "vaults_kv_secrets_key1": {
      "type": "string",
      "defaultValue": "dbkey1"
    },
    "vaults_kv_secrets_key2": {
      "type": "string",
      "defaultValue": "dbkey2"
    },
    "vaults_kv_secrets_key3": {
      "type": "string",
      "defaultValue": "ripaStorage"
    },
    "vaults_kv_secrets_key4": {
      "type": "string",
      "defaultValue": "takey1"
    },
    "vaults_kv_secrets_key5": {
      "type": "string",
      "defaultValue": "takey2"
    },
    "vaults_kv_secrets_key6": {
      "type": "string",
      "defaultValue": "SftpKey"
    },
    "vaults_kv_secrets_key7": {
      "type": "string",
      "defaultValue": "SftpHost"
    },
    "vaults_kv_secrets_key8": {
      "type": "string",
      "defaultValue": "SftpPassword"
    },
    "vaults_kv_secrets_key9": {
      "type": "string",
      "defaultValue": "SftpUsername"
    },
    "vaults_kv_secrets_key10": {
      "type": "string",
      "defaultValue": "CosmosConnectionString"
    },
    "submission_fa_config_storage_container_prefix_results": {
      "type": "string",
      "defaultValue": "result"
    },
    "submission_fa_config_storage_container_prefix_submissions": {
      "type": "string",
      "defaultValue": "submission"
    },
    "submission_fa_config_storage_container_prefix_cpra": {
      "type": "string",
      "defaultValue": "cpra"
    },
    "doj_environment": {
      "type": "string",
      "defaultValue": "PROD"
    },
    "submission_fa_config_sftp_input_path": {
      "type": "string",
      "defaultValue": "/incoming_to_DOJ/JSON/"
    },
    "submission_fa_config_sftp_output_path": {
      "type": "string",
      "defaultValue": "/responses_from_DOJ/"
    },
    "submission_fa_config_sftp_port": {
      "type": "int",
      "defaultValue": 22
    },
    "apim_endpoint": {
      "type": "SecureString",
      "defaultValue": ".azure-api.us"
    },
    "apim_apis_userprofile_path": {
      "type": "SecureString",
      "defaultValue": "userprofile"
    },
    "apim_apis_userprofile_name": {
      "type": "string",
      "defaultValue": "userprofile"
    },
    "apim_apis_userprofile_serviceurl": {
      "type": "SecureString",
      "defaultValue": "http://userprofile.usgovcloudapp.net/api"
    },
    "apim_apis_stop_path": {
      "type": "SecureString",
      "defaultValue": "Stop"
    },
    "apim_apis_stop_name": {
      "type": "string",
      "defaultValue": "stop"
    },
    "apim_apis_stop_serviceurl": {
      "type": "string",
      "defaultValue": "http://stop.usgovcloudapp.net/api"
    },
    "apim_apis_textAnalytics_path": {
      "type": "SecureString",
      "defaultValue": "TextAnalytics"
    },
    "apim_apis_textAnalytics_name": {
      "type": "string",
      "defaultValue": "TextAnalytics"
    },
    "apim_apis_textAnalytics_serviceurl": {
      "type": "string",
      "defaultValue": "http://textanalytics.usgovcloudapp.net/api"
    },
    "apim_apis_domain_path": {
      "type": "SecureString",
      "defaultValue": "Domain"
    },
    "apim_apis_domain_name": {
      "type": "string",
      "defaultValue": "domain"
    },
    "apim_apis_domain_serviceurl": {
      "type": "string",
      "defaultValue": "http://domain.usgovcloudapp.net/api"
    },
    "apim_apis_submission_path": {
      "type": "SecureString",
      "defaultValue": "Submission"
    },
    "apim_apis_submission_name": {
      "type": "string",
      "defaultValue": "submission"
    },
    "apim_apis_submission_serviceurl": {
      "type": "string",
      "defaultValue": "http://submission.usgovcloudapp.net/api"
    },
    "dbaccount_sqlDb_name": {
      "type": "string",
      "defaultValue": "ripastops"
    },
    "dbaccount_sqlDb_user_container_name": {
      "type": "string",
      "defaultValue": "userprofile"
    },
    "dbaccount_sqlDb_stop_container_name": {
      "type": "string",
      "defaultValue": "stop"
    },
    "dbaccount_sqlDb_stop_audit_container_name": {
      "type": "string",
      "defaultValue": "stopaudit"
    },
    "dbaccount_sqlDb_submission_container_name": {
      "type": "string",
      "defaultValue": "submission"
    },
    "privateDnsZones_privatelink_azure_com_name": {
      "defaultValue": "pvtlink.documents.azure.com",
      "type": "string"
    },
    "privateDnsZones_vnetlink_name": {
      "defaultValue": "vnetlink",
      "type": "string"
    },
    "policyCont_a": {
      "type": "string",
      "defaultValue": "<policies><inbound><cors allow-credentials=\"true\"><allowed-origins><origin>"
    },
    "policyCont_b": {
      "type": "string",
      "defaultValue": "</origin><origin>"
    },
    "policyCont_c": {
      "type": "string",
      "defaultValue": "</origin></allowed-origins><allowed-methods><method>GET</method><method>PUT</method><method>POST</method><method>DELETE</method></allowed-methods><allowed-headers><header>Cache-Control</header><header>Ocp-Apim-Trace</header><header>Authorization</header><header>Content-Type</header></allowed-headers></cors><validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing or invalid.\" require-expiration-time=\"true\" require-scheme=\"Bearer\" require-signed-tokens=\"true\" clock-skew=\"240\" output-token-variable-name=\"openid_token\"><openid-config url=\""
    },
    "policyCont_d": {
      "type": "string",
      "defaultValue": "/v2.0/.well-known/openid-configuration\" /><audiences><audience>"
    },
    "policyCont_e": {
      "type": "string",
      "defaultValue": "</audience></audiences><required-claims><claim name=\"roles\" match=\"any\"><value>RIPA-ADMINS-ROLE</value><value>RIPA-USERS-ROLE</value></claim></required-claims></validate-jwt></inbound><backend><forward-request/></backend><outbound/><on-error/></policies>"
    },
    "apim_subnet_name": {
      "type": "string",
      "defaultValue": "-apim-subnet"
    },
    "cdb_subnet_name": {
      "type": "string",
      "defaultValue": "-cdb-subnet"
    },
    "prv_dns_soa_name": {
      "defaultValue": "@",
      "type": "string"
    },
    "privateEndpoints_cdb_pe_name": {
      "defaultValue": "cdb-pe",
      "type": "string"
    },
    "Vnet_addressprefixes": {
      "type": "array",
      "defaultValue": [ "172.16.0.0/16" ]
    },
    "apim_subnet_addressprefix": {
      "defaultValue": "172.16.0.0/24",
      "type": "string"
    },
    "cdb_subnet_addressprefix": {
      "defaultValue": "172.16.1.0/24",
      "type": "string"
    },
    "cdb_private_ipaddress1": {
      "defaultValue": "172.16.1.4",
      "type": "string"
    },
    "cdb_private_ipaddress2": {
      "defaultValue": "172.16.1.5",
      "type": "string"
    },
    "namespaces_sdsd_ripa_d_sbn_name": {
      "defaultValue": "-sbn",
      "type": "String"
    },
    "utcNowValue": {
      "type": "string",
      "defaultValue": "[utcNow('yyyyMMDDHHmmssFFFF')]"
    },
    "cssa_subscription_id": {
      "type": "string",
      "defaultValue": "#{CSSA_SUBSCRIPTION_ID}#"
    },
    "cssa_subscription_id_dev": {
      "type": "string",
      "defaultValue": "#{CSSA_SUBSCRIPTION_ID_DEV}#"
    },
    "cssa_subscription_id_uat": {
      "type": "string",
      "defaultValue": "#{CSSA_SUBSCRIPTION_ID_UAT}#"
    }
  },
  "variables": {
    "servicebus_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'), parameters('namespaces_sdsd_ripa_d_sbn_name'))]",
    "components_ripa_ai_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('components_ai_name'))]",
    "databaseAccounts_ripa_cdb_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('databaseAccounts_cdb_name'))]",
    "networkSecurityGroups_ripa_apim_nsg_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('networkSecurityGroups_apim_nsg_name'))]",
    "networkSecurityGroups_ripa_vnet_cdb_subnet_nsg_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('networkSecurityGroups_vnet_cdb_subnet_nsg_name'))]",
    "serverfarms_userprofile_ASP_riparg_af76_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('serverfarms_userprofile_ASP_name'))]",
    "serverfarms_domain_ASP_riparg_af76_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('serverfarms_domain_ASP_name'))]",
    "serverfarms_stop_ASP_riparg_af76_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('serverfarms_stop_ASP_name'))]",
    "serverfarms_submission_ASP_riparg_af76_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('serverfarms_submission_ASP_name'))]",
    "serverfarms_textanalytics_ASP_riparg_af76_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('serverfarms_textanalytics_ASP_name'))]",
    "service_ripa_apim_wus2_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('service_apim_name'))]",
    "sites_ripa_domain_fa_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('domain_fa_name'))]",
    "sites_ripa_stop_fa_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('stop_fa_name'))]",
    "sites_ripa_submission_fa_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('submission_fa_name'))]",
    "sites_ripa_textanalytics_fa_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('textanalytics_fa_name'))]",
    "sites_ripa_user_fa_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('sites_user_fa_name'))]",
    "storageAccounts_ripactsa_name": "[concat(parameters('agency_abbreviation'), replace(parameters('application'), '-', ''), parameters('storageAccounts_ctsa_name'))]",
    "storageAccounts_ripafnsa_name": "[concat(parameters('agency_abbreviation'), replace(parameters('application'), '-', ''), parameters('storageAccounts_functionssa_name'))]",
    "storageAccounts_ripansgflsa_name": "[concat(parameters('agency_abbreviation'), replace(parameters('application'), '-', ''), parameters('storageAccounts_nsgflowlogssa_name'))]",
    "storageAccounts_ripauisa_name": "[concat(parameters('agency_abbreviation'), replace(parameters('application'), '-', ''), parameters('storageAccounts_uisa_name'))]",
    "vaults_ripa_kv_name": "[concat(parameters('agency_abbreviation'), parameters('application'), toLower(take(uniqueString(parameters('utcNowValue')), 3)), parameters('vaults_kv_name'))]",
    "virtualNetworks_ripa_vnet_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('virtualNetworks_vnet_name'))]",
    "workspaces_ripa_laws_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('workspaces_laws_name'))]",
    "TA_Name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('accounts_ripaTA_name'))]",
    "privateDnsZones_privatelink_documents_azure_com_name": "[concat(parameters('agency_abbreviation'), replace(parameters('application'), '-',''), parameters('privateDnsZones_privatelink_azure_com_name'))]",
    "privatednszones_a_name": "[concat(variables('databaseAccounts_ripa_cdb_name'),'-', resourceGroup().location)]",
    "privateEndpoints_ripa_cdb_pe_name": "[concat(parameters('agency_abbreviation'),'-', parameters('application'),'-', parameters('privateEndpoints_cdb_pe_name'))]",
    "user_fa_keyvault_referencestring": "[concat('@Microsoft.KeyVault(SecretUri=https://',variables('vaults_ripa_kv_name'),'.usgovcloudapi.net/secrets/', parameters('vaults_kv_secrets_key1'),')')]",
    "keyvault_secret_ripa_storage": "[concat('@Microsoft.KeyVault(SecretUri=https://',variables('vaults_ripa_kv_name'),'.usgovcloudapi.net/secrets/', parameters('vaults_kv_secrets_key3'),')')]",
    "textanalytics_fa_keyvault_referencestring": "[concat('@Microsoft.KeyVault(SecretUri=https://',variables('vaults_ripa_kv_name'),'.usgovcloudapi.net/secrets/', parameters('vaults_kv_secrets_key4'),')')]",
    "cssa_domain_url": "[concat('https://', parameters('application'), '-', parameters('agency_abbreviation'),'.cssa.cloud')]",
    "custom_domain_url": "[concat('https://', parameters('app_cname_alias'), '.', parameters('auth_fqdn'))]",
    "public_ui_url": "[if(equals(parameters('app_domain_type'), 'private_domain'), variables('custom_domain_url'), variables('cssa_domain_url'))]",
    "keyvault_secret_sftp_key": "[concat('@Microsoft.KeyVault(SecretUri=https://',variables('vaults_ripa_kv_name'),'.usgovcloudapi.net/secrets/', parameters('vaults_kv_secrets_key6'),')')]",
    "keyvault_secret_sftp_host": "[concat('@Microsoft.KeyVault(SecretUri=https://',variables('vaults_ripa_kv_name'),'.usgovcloudapi.net/secrets/', parameters('vaults_kv_secrets_key7'),')')]",
    "keyvault_secret_sftp_password": "[concat('@Microsoft.KeyVault(SecretUri=https://',variables('vaults_ripa_kv_name'),'.usgovcloudapi.net/secrets/', parameters('vaults_kv_secrets_key8'),')')]",
    "keyvault_secret_sftp_username": "[concat('@Microsoft.KeyVault(SecretUri=https://',variables('vaults_ripa_kv_name'),'.usgovcloudapi.net/secrets/', parameters('vaults_kv_secrets_key9'),')')]",
    "keyvault_secret_cosmos_connection_string": "[concat('@Microsoft.KeyVault(SecretUri=https://',variables('vaults_ripa_kv_name'),'.usgovcloudapi.net/secrets/', parameters('vaults_kv_secrets_key10'),')')]",
    "keyvault_secret_servicebus_connection_string": "[concat('@Microsoft.KeyVault(SecretUri=https://',variables('vaults_ripa_kv_name'),'.usgovcloudapi.net/secrets/', parameters('vaults_kv_secrets_key0'),')')]",
    "doj_inbound_folder": "[concat('/', parameters('doj_environment'), parameters('submission_fa_config_sftp_input_path'))]",
    "doj_outbound_folder": "[concat('/', parameters('doj_environment'), parameters('submission_fa_config_sftp_output_path'))]",

    // switch sub key for linking cosmosDB to dashboard
    "ext-dashboard-subscription-key": "[
      if(equals(parameters('environment_type'), 'PROD'), parameters('cssa_subscription_id'), 
        if(equals(parameters('environment_type'), 'QA'), parameters('cssa_subscription_id_uat'), parameters('cssa_subscription_id_dev')))]",

    "template_version": "#{TEMPLATE_VERSION}#",
    "default_tags": {
      "application": "ripa",
      "agency": "[parameters('agency_abbreviation')]",
      "agency_ori": "[parameters('agency_ori')]",
      "template_version": "[variables('template_version')]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.ServiceBus/namespaces",
      "apiVersion": "2018-01-01-preview",
      "name": "[variables('servicebus_name')]",
      "location": "[resourceGroup().location]",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.ServiceBus/namespaces'), parameters('user_tags')['Microsoft.ServiceBus/namespaces'], json('{}')))]",
      "sku": {
        "name": "Basic",
        "tier": "Basic"
      },
      "properties": {
        "zoneRedundant": false
      }
    },
    {
      "type": "Microsoft.ServiceBus/namespaces/AuthorizationRules",
      "apiVersion": "2017-04-01",
      "name": "[concat(variables('servicebus_name'), '/RootManageSharedAccessKey')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', variables('servicebus_name'))]"
      ],
      "properties": {
        "rights": [ "Listen", "Manage", "Send" ]
      }
    },
    {
      "type": "Microsoft.ServiceBus/namespaces/queues",
      "apiVersion": "2017-04-01",
      "name": "[concat(variables('servicebus_name'), '/submission')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', variables('servicebus_name'))]"
      ],
      "properties": {
        "lockDuration": "PT5M",
        "maxSizeInMegabytes": 5120,
        "requiresDuplicateDetection": false,
        "requiresSession": false,
        "defaultMessageTimeToLive": "P14D",
        "deadLetteringOnMessageExpiration": true,
        "enableBatchedOperations": true,
        "duplicateDetectionHistoryTimeWindow": "PT10M",
        "maxDeliveryCount": 10,
        "status": "Active",
        "enablePartitioning": true,
        "enableExpress": false
      }
    },
    {
      "type": "Microsoft.ServiceBus/namespaces/queues",
      "apiVersion": "2017-04-01",
      "name": "[concat(variables('servicebus_name'), '/result')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', variables('servicebus_name'))]"
      ],
      "properties": {
        "lockDuration": "PT5M",
        "maxSizeInMegabytes": 5120,
        "requiresDuplicateDetection": false,
        "requiresSession": false,
        "defaultMessageTimeToLive": "P14D",
        "deadLetteringOnMessageExpiration": true,
        "enableBatchedOperations": true,
        "duplicateDetectionHistoryTimeWindow": "PT10M",
        "maxDeliveryCount": 10,
        "status": "Active",
        "enablePartitioning": true,
        "enableExpress": false
      }
    },
    {
      "type": "Microsoft.Insights/actionGroups",
      "apiVersion": "2019-06-01",
      "name": "[parameters('actionGroups_Application_Insights_Smart_Detection_name')]",
      "location": "[parameters('glocation')]",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Insights/actionGroups'), parameters('user_tags')['Microsoft.Insights/actionGroups'], json('{}')))]",
      "properties": {
        "groupShortName": "SmartDetect",
        "enabled": true,
        "emailReceivers": [],
        "smsReceivers": [],
        "webhookReceivers": [],
        "itsmReceivers": [],
        "azureAppPushReceivers": [],
        "automationRunbookReceivers": [],
        "voiceReceivers": [],
        "logicAppReceivers": [],
        "azureFunctionReceivers": [],
        "armRoleReceivers": [
          {
            "name": "Monitoring Contributor",
            "roleId": "749f88d5-cbae-40b8-bcfc-e573ddc772fa",
            "useCommonAlertSchema": true
          },
          {
            "name": "Monitoring Reader",
            "roleId": "43d0d8ad-25c7-4714-9337-8ba259a9fe05",
            "useCommonAlertSchema": true
          }
        ]
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2016-10-01",
      "name": "[variables('vaults_ripa_kv_name')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('sites_ripa_user_fa_name'))]"
      ],
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.KeyVault/vaults'), parameters('user_tags')['Microsoft.KeyVault/vaults'], json('{}')))]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "Standard"
        },
        "tenantId": "[parameters('kv_tenantId')]",
        "accessPolicies": [
          {
            "tenantId": "[reference(concat('Microsoft.Web/sites/',  variables('sites_ripa_user_fa_name')), '2018-11-01','Full').identity.tenantId]",
            "objectId": "[reference(concat('Microsoft.Web/sites/',  variables('sites_ripa_user_fa_name')), '2018-11-01','Full').identity.principalId]",
            "permissions": {
              "keys": "[parameters('kv_keysPermissions')]",
              "secrets": "[parameters('kv_secretsPermissions')]",
              "certificates": "[parameters('kv_CertPermissions')]"
            }
          },
          {
            "tenantId": "[reference(concat('Microsoft.Web/sites/',  variables('sites_ripa_domain_fa_name')), '2018-11-01','Full').identity.tenantId]",
            "objectId": "[reference(concat('Microsoft.Web/sites/',  variables('sites_ripa_domain_fa_name')), '2018-11-01','Full').identity.principalId]",
            "permissions": {
              "keys": "[parameters('kv_keysPermissions')]",
              "secrets": "[parameters('kv_secretsPermissions')]",
              "certificates": "[parameters('kv_CertPermissions')]"
            }
          },
          {
            "tenantId": "[reference(concat('Microsoft.Web/sites/',  variables('sites_ripa_stop_fa_name')), '2018-11-01','Full').identity.tenantId]",
            "objectId": "[reference(concat('Microsoft.Web/sites/',  variables('sites_ripa_stop_fa_name')), '2018-11-01','Full').identity.principalId]",
            "permissions": {
              "keys": "[parameters('kv_keysPermissions')]",
              "secrets": "[parameters('kv_secretsPermissions')]",
              "certificates": "[parameters('kv_CertPermissions')]"
            }
          },
          {
            "tenantId": "[reference(concat('Microsoft.Web/sites/',  variables('sites_ripa_submission_fa_name')), '2018-11-01','Full').identity.tenantId]",
            "objectId": "[reference(concat('Microsoft.Web/sites/',  variables('sites_ripa_submission_fa_name')), '2018-11-01','Full').identity.principalId]",
            "permissions": {
              "keys": "[parameters('kv_keysPermissions')]",
              "secrets": "[parameters('kv_secretsPermissions')]",
              "certificates": "[parameters('kv_CertPermissions')]"
            }
          },
          {
            "tenantId": "[reference(concat('Microsoft.Web/sites/',  variables('sites_ripa_textanalytics_fa_name')), '2018-11-01','Full').identity.tenantId]",
            "objectId": "[reference(concat('Microsoft.Web/sites/',  variables('sites_ripa_textanalytics_fa_name')), '2018-11-01','Full').identity.principalId]",
            "permissions": {
              "keys": "[parameters('kv_keysPermissions')]",
              "secrets": "[parameters('kv_secretsPermissions')]",
              "certificates": "[parameters('kv_CertPermissions')]"
            }
          },
          { // hardcode rl permissions
            "tenantId": "[reference(concat('Microsoft.Web/sites/',  variables('sites_ripa_textanalytics_fa_name')), '2018-11-01','Full').identity.tenantId]",
            "objectId": "5e3fa671-8543-49e3-8969-a555cc530a78",
            "permissions": {
              "keys": "[parameters('kv_keysPermissions')]",
              "secrets": "[parameters('kv_secretsPermissions')]",
              "certificates": "[parameters('kv_CertPermissions')]"
            }
          }
        ],
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": false,
        "enableSoftDelete": true
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-08-01",
      "name": "[variables('networkSecurityGroups_ripa_apim_nsg_name')]",
      "location": "[resourceGroup().location]",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/networkSecurityGroups'), parameters('user_tags')['Microsoft.Network/networkSecurityGroups'], json('{}')))]",
      "properties": {
        "securityRules": [
          {
            "name": "Internet-Vnet-443",
            "properties": {
              "description": "Allows internet traffic only on 443 to access resources protected by this NSG",
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "ApiManagementVnet",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "3443",
              "sourceAddressPrefix": "ApiManagement",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 200,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "VnetStorage",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "Storage",
              "access": "Allow",
              "priority": 200,
              "direction": "Outbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "VnetAzureActiveDirectory",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "AzureActiveDirectory",
              "access": "Allow",
              "priority": 210,
              "direction": "Outbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "VnetAzureKeyVault",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "AzureKeyVault",
              "access": "Allow",
              "priority": 220,
              "direction": "Outbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "VnetAzureCloud",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "AzureCloud",
              "access": "Allow",
              "priority": 230,
              "direction": "Outbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [ "443", "12000" ],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "VnetAzureMonitor",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "AzureMonitor",
              "access": "Allow",
              "priority": 240,
              "direction": "Outbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [ "443", "1886" ],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AzureLoadBalancerVnet",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "8080",
              "sourceAddressPrefix": "AzureLoadBalancer",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 250,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-08-01",
      "name": "[variables('networkSecurityGroups_ripa_vnet_cdb_subnet_nsg_name')]",
      "location": "[resourceGroup().location]",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/networkSecurityGroups'), parameters('user_tags')['Microsoft.Network/networkSecurityGroups'], json('{}')))]",
      "properties": {
        "securityRules": []
      }
    },
    {
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2018-09-01",
      "name": "[variables('privateDnsZones_privatelink_documents_azure_com_name')]",
      "location": "[parameters('glocation')]",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/privateDnsZones'), parameters('user_tags')['Microsoft.Network/privateDnsZones'], json('{}')))]",
      "properties": {
        "maxNumberOfRecordSets": 25000,
        "maxNumberOfVirtualNetworkLinks": 1000,
        "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
        "numberOfRecordSets": 3,
        "numberOfVirtualNetworkLinks": 1,
        "numberOfVirtualNetworkLinksWithRegistration": 0,
        "provisioningState": "Succeeded"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2020-10-01",
      "name": "[variables('workspaces_ripa_laws_name')]",
      "location": "[resourceGroup().location]",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.OperationalInsights/workspaces'), parameters('user_tags')['Microsoft.OperationalInsights/workspaces'], json('{}')))]",
      "properties": {
        "sku": {
          "name": "pergb2018"
        },
        "retentionInDays": 30,
        "workspaceCapping": {
          "dailyQuotaGb": -1
        },
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[variables('storageAccounts_ripactsa_name')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Storage/storageAccounts'), parameters('user_tags')['Microsoft.Storage/storageAccounts'], json('{}')))]",
      "properties": {
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": true,
        "allowSharedKeyAccess": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[variables('storageAccounts_ripafnsa_name')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "Storage",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Storage/storageAccounts'), parameters('user_tags')['Microsoft.Storage/storageAccounts'], json('{}')))]",
      "properties": {
        "minimumTlsVersion": "TLS1_2",
        "networkAcls": {
          "resourceAccessRules": [],
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[variables('storageAccounts_ripansgflsa_name')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Storage/storageAccounts'), parameters('user_tags')['Microsoft.Storage/storageAccounts'], json('{}')))]",
      "properties": {
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": true,
        "allowSharedKeyAccess": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[variables('storageAccounts_ripauisa_name')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Storage/storageAccounts'), parameters('user_tags')['Microsoft.Storage/storageAccounts'], json('{}')))]",
      "properties": {
        "azureFilesIdentityBasedAuthentication": {
          "directoryServiceOptions": "None"
        },
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": true,
        "allowSharedKeyAccess": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    // userprofile Serverfarms
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "name": "[variables('serverfarms_userprofile_ASP_riparg_af76_name')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic",
        "size": "Y1",
        "family": "Y",
        "capacity": 0
      },
      "kind": "functionapp",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Web/serverfarms'), parameters('user_tags')['Microsoft.Web/serverfarms'], json('{}')))]",
      "properties": {
        "perSiteScaling": false,
        "maximumElasticWorkerCount": 1,
        "isSpot": false,
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0
      }
    },
    //domain Serverfarms
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "name": "[variables('serverfarms_domain_ASP_riparg_af76_name')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic",
        "size": "Y1",
        "family": "Y",
        "capacity": 0
      },
      "kind": "functionapp",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Web/serverfarms'), parameters('user_tags')['Microsoft.Web/serverfarms'], json('{}')))]",
      "properties": {
        "perSiteScaling": false,
        "maximumElasticWorkerCount": 1,
        "isSpot": false,
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0
      }
    },
    //stop Serverfarms
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "name": "[variables('serverfarms_stop_ASP_riparg_af76_name')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic",
        "size": "Y1",
        "family": "Y",
        "capacity": 0
      },
      "kind": "functionapp",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Web/serverfarms'), parameters('user_tags')['Microsoft.Web/serverfarms'], json('{}')))]",
      "properties": {
        "perSiteScaling": false,
        "maximumElasticWorkerCount": 1,
        "isSpot": false,
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0
      }
    },
    //submission Serverfarms
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "name": "[variables('serverfarms_submission_ASP_riparg_af76_name')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic",
        "size": "Y1",
        "family": "Y",
        "capacity": 0
      },
      "kind": "functionapp",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Web/serverfarms'), parameters('user_tags')['Microsoft.Web/serverfarms'], json('{}')))]",
      "properties": {
        "perSiteScaling": false,
        "maximumElasticWorkerCount": 1,
        "isSpot": false,
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0
      }
    },
    //textanalytics Serverfarms
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "name": "[variables('serverfarms_textanalytics_ASP_riparg_af76_name')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic",
        "size": "Y1",
        "family": "Y",
        "capacity": 0
      },
      "kind": "functionapp",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Web/serverfarms'), parameters('user_tags')['Microsoft.Web/serverfarms'], json('{}')))]",
      "properties": {
        "perSiteScaling": false,
        "maximumElasticWorkerCount": 1,
        "isSpot": false,
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0
      }
    },
    {
      "type": "Microsoft.ApiManagement/service",
      "apiVersion": "2019-12-01",
      "name": "[variables('service_ripa_apim_wus2_name')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworks_ripa_vnet_name'), concat(variables('virtualNetworks_ripa_vnet_name'), parameters('apim_subnet_name')))]"
      ],
      "sku": {
        "name": "[parameters('apim_sku')]",
        "capacity": 1
      },
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.ApiManagement/service'), parameters('user_tags')['Microsoft.ApiManagement/service'], json('{}')))]",
      "properties": {
        "publisherEmail": "[parameters('apim_publisherEmail')]",
        "publisherName": "[parameters('apim_publisherName')]",
        "notificationSenderEmail": "apimgmt-noreply@mail.windowsazure.com",
        "hostnameConfigurations": [
          {
            "type": "Proxy",
            "hostName": "[concat(variables('service_ripa_apim_wus2_name'), parameters('apim_endpoint'))]",
            "negotiateClientCertificate": false,
            "defaultSslBinding": true
          }
        ],
        // "virtualNetworkConfiguration": {
        //   // "subnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworks_ripa_vnet_name'), concat(variables('virtualNetworks_ripa_vnet_name'), parameters('apim_subnet_name')))]"
        // },
        "customProperties": {
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168": "false",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11": "false",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10": "false",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30": "false",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": "false",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": "false",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": "false",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2": "false"
        },
        // "virtualNetworkType": "External",
        "disableGateway": false,
        "apiVersionConstraint": {}
      }
    },
    //userprofile api
    {
      "type": "Microsoft.ApiManagement/service/apis",
      "apiVersion": "2019-12-01",
      "name": "[concat(variables('service_ripa_apim_wus2_name'), '/', parameters('apim_apis_userprofile_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', variables('service_ripa_apim_wus2_name'))]"
      ],
      "properties": {
        "displayName": "[parameters('apim_apis_userprofile_name')]",
        "apiRevision": "1",
        "subscriptionRequired": true,
        "serviceUrl": "[parameters('apim_apis_userprofile_serviceurl')]",
        "protocols": [ "https" ],
        "isCurrent": true,
        "path": "[parameters('apim_apis_userprofile_path')]"
      }
    },
    //stop api
    {
      "type": "Microsoft.ApiManagement/service/apis",
      "apiVersion": "2019-12-01",
      "name": "[concat(variables('service_ripa_apim_wus2_name'), '/', parameters('apim_apis_stop_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', variables('service_ripa_apim_wus2_name'))]"
      ],
      "properties": {
        "displayName": "[parameters('apim_apis_stop_name')]",
        "apiRevision": "1",
        "subscriptionRequired": true,
        "serviceUrl": "[parameters('apim_apis_stop_serviceurl')]",
        "protocols": [ "https" ],
        "isCurrent": true,
        "path": "[parameters('apim_apis_stop_path')]"
      }
    },
    //TextAnalytics api
    {
      "type": "Microsoft.ApiManagement/service/apis",
      "apiVersion": "2019-12-01",
      "name": "[concat(variables('service_ripa_apim_wus2_name'), '/', parameters('apim_apis_textAnalytics_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', variables('service_ripa_apim_wus2_name'))]"
      ],
      "properties": {
        "displayName": "[parameters('apim_apis_textAnalytics_name')]",
        "apiRevision": "1",
        "subscriptionRequired": true,
        "serviceUrl": "[parameters('apim_apis_textAnalytics_serviceurl')]",
        "protocols": [ "https" ],
        "isCurrent": true,
        "path": "[parameters('apim_apis_textAnalytics_path')]"
      }
    },
    //Domain api
    {
      "type": "Microsoft.ApiManagement/service/apis",
      "apiVersion": "2019-12-01",
      "name": "[concat(variables('service_ripa_apim_wus2_name'), '/', parameters('apim_apis_domain_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', variables('service_ripa_apim_wus2_name'))]"
      ],
      "properties": {
        "displayName": "[parameters('apim_apis_domain_name')]",
        "apiRevision": "1",
        "subscriptionRequired": true,
        "serviceUrl": "[parameters('apim_apis_domain_serviceurl')]",
        "protocols": [ "https" ],
        "isCurrent": true,
        "path": "[parameters('apim_apis_domain_path')]"
      }
    },
    //submission api
    {
      "type": "Microsoft.ApiManagement/service/apis",
      "apiVersion": "2019-12-01",
      "name": "[concat(variables('service_ripa_apim_wus2_name'), '/', parameters('apim_apis_submission_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', variables('service_ripa_apim_wus2_name'))]"
      ],
      "properties": {
        "displayName": "[parameters('apim_apis_submission_name')]",
        "apiRevision": "1",
        "subscriptionRequired": true,
        "serviceUrl": "[parameters('apim_apis_submission_serviceurl')]",
        "protocols": [ "https" ],
        "isCurrent": true,
        "path": "[parameters('apim_apis_submission_path')]"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/policies",
      "apiVersion": "2019-12-01",
      "name": "[concat(variables('service_ripa_apim_wus2_name'), '/policy')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', variables('service_ripa_apim_wus2_name'))]"
      ],
      "properties": {
        "value": "[concat(parameters('policyCont_a'), reference(concat('Microsoft.Storage/storageAccounts/',  variables('storageAccounts_ripauisa_name')), '2019-06-01','Full').properties.primaryEndpoints.web, parameters('policyCont_b'), variables('public_ui_url'), parameters('policyCont_c'), parameters('auth_authority'), parameters('auth_tenant_id'), parameters('policyCont_d'), parameters('auth_app_id'), parameters('policyCont_e'))]",
        "format": "xml"
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2020-09-01",
      "name": "[variables('databaseAccounts_ripa_cdb_name')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworks_ripa_vnet_name'), concat(variables('virtualNetworks_ripa_vnet_name'), parameters('cdb_subnet_name')))]"
      ],
      "kind": "GlobalDocumentDB",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.DocumentDB/databaseAccounts'), parameters('user_tags')['Microsoft.DocumentDB/databaseAccounts'], json('{}')))]",
      "properties": {
        "publicNetworkAccess": "Enabled",
        "enableAutomaticFailover": false,
        "enableMultipleWriteLocations": false,
        "isVirtualNetworkFilterEnabled": true,
        "virtualNetworkRules": [
          {
            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworks_ripa_vnet_name'), concat(variables('virtualNetworks_ripa_vnet_name'), parameters('cdb_subnet_name')))]",
            "ignoreMissingVNetServiceEndpoint": true
          }
        ],
        "disableKeyBasedMetadataWriteAccess": false,
        "enableFreeTier": false,
        "enableAnalyticalStorage": false,
        "databaseAccountOfferType": "Standard",
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session",
          "maxIntervalInSeconds": 5,
          "maxStalenessPrefix": 100
        },
        "locations": [
          {
            "locationName": "[resourceGroup().location]",
            "provisioningState": "Succeeded",
            "failoverPriority": 0,
            "isZoneRedundant": false
          }
        ],
        "cors": [],
        "capabilities": [
          {
            "name": "EnableServerless"
          }
        ],
        "ipRules": [
          {
            "ipAddressOrRange": "0.0.0.0"
          }
        ],
        "backupPolicy": {
          "type": "Periodic",
          "periodicModeProperties": {
            "backupIntervalInMinutes": 60,
            "backupRetentionIntervalInHours": 168
          }
        }
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2020-09-01",
      "name": "[concat(variables('databaseAccounts_ripa_cdb_name'), '/', parameters('dbaccount_sqlDb_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseAccounts_ripa_cdb_name'))]"
      ],
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.DocumentDB/databaseAccounts/sqlDatabases'), parameters('user_tags')['Microsoft.DocumentDB/databaseAccounts/sqlDatabases'], json('{}')))]",
      "properties": {
        "resource": {
          "id": "[parameters('dbaccount_sqlDb_name')]"
        }
      }
    },
    //KeyVault Secrets
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(variables('vaults_ripa_kv_name'), '/', parameters('vaults_kv_secrets_key0'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('vaults_ripa_kv_name'))]",
        "[resourceId('Microsoft.ServiceBus/namespaces/AuthorizationRules', variables('servicebus_name'), 'RootManageSharedAccessKey')]"
      ],
      "properties": {
        "value": "[listKeys(resourceId('Microsoft.ServiceBus/namespaces/AuthorizationRules', variables('servicebus_name'), 'RootManageSharedAccessKey'), '2017-04-01').primaryConnectionString]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(variables('vaults_ripa_kv_name'), '/', parameters('vaults_kv_secrets_key1'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('vaults_ripa_kv_name'))]"
      ],
      "properties": {
        "value": "[listKeys(concat('Microsoft.DocumentDB/databaseAccounts/',  variables('databaseAccounts_ripa_cdb_name')), '2020-09-01').primaryMasterKey]"
      }
    },

    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(variables('vaults_ripa_kv_name'), '/', parameters('vaults_kv_secrets_key2'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('vaults_ripa_kv_name'))]"
      ],
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[listKeys(concat('Microsoft.DocumentDB/databaseAccounts/',  variables('databaseAccounts_ripa_cdb_name')), '2020-09-01').secondaryMasterKey]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(variables('vaults_ripa_kv_name'), '/', parameters('vaults_kv_secrets_key3'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('vaults_ripa_kv_name'))]"
      ],
      "properties": {
        "contentType": "domain storage connection string",
        "attributes": {
          "enabled": true
        },
        "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccounts_ripactsa_name'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripactsa_name')), '2019-06-01').keys[0].value,';EndpointSuffix=', parameters('storage_ep_suff'))]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(variables('vaults_ripa_kv_name'), '/', parameters('vaults_kv_secrets_key4'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('vaults_ripa_kv_name'))]"
      ],
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[listKeys(concat('Microsoft.CognitiveServices/accounts/',  variables('TA_Name')), '2017-04-18').key1]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(variables('vaults_ripa_kv_name'), '/', parameters('vaults_kv_secrets_key5'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('vaults_ripa_kv_name'))]"
      ],
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[listKeys(concat('Microsoft.CognitiveServices/accounts/',  variables('TA_Name')), '2017-04-18').key2]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(variables('vaults_ripa_kv_name'), '/', parameters('vaults_kv_secrets_key7'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('vaults_ripa_kv_name'))]"
      ],
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[parameters('doj_sftp_server')]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(variables('vaults_ripa_kv_name'), '/', parameters('vaults_kv_secrets_key6'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('vaults_ripa_kv_name'))]"
      ],
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[parameters('doj_sftp_server_key')]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(variables('vaults_ripa_kv_name'), '/', parameters('vaults_kv_secrets_key9'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('vaults_ripa_kv_name'))]"
      ],
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[parameters('doj_sftp_username')]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(variables('vaults_ripa_kv_name'), '/', parameters('vaults_kv_secrets_key8'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('vaults_ripa_kv_name'))]"
      ],
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[parameters('doj_sftp_password')]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(variables('vaults_ripa_kv_name'), '/', parameters('vaults_kv_secrets_key10'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('vaults_ripa_kv_name'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseAccounts_ripa_cdb_name'))]"
      ],
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseAccounts_ripa_cdb_name')), '2020-09-01').connectionStrings[0].connectionString]"
        // "value": "[parameters('doj_sftp_password')]"

      }
    },
    // adding in key
    // agency_ori , '_RIPA_CDB' --- probbbbs what the key will be
    // needs to go to a hardcoded val, prod vs non prod
    // { 
    //   "type": "Microsoft.KeyVault/vaults/secrets",
    //   "apiVersion": "2016-10-01",
    //   "name": "[concat(variables('test_ripa_kv'), '/', 'rl-test')]",
    //   "location": "[resourceGroup().location]",
    //   "dependsOn": [
    //     "[resourceId('Microsoft.KeyVault/vaults', variables('vaults_ripa_kv_name'))]",
    //     "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseAccounts_ripa_cdb_name'))]"
    //   ],
    //   "properties": {
    //     "attributes": {
    //       "enabled": true
    //     },
    //     "value": "beep beep beep beep beep"


    //     // "value": "[parameters('doj_sftp_password')]"

    //   }
    // },
    // {
    //   // add key to cross vault using nested template
    //   "apiVersion": "2017-05-10",
    //   "name": "ext_kv_db_vals",
    //   "type": "Microsoft.Resources/deployments",

    //   "resourceGroup": "[variables('ext_group_name')]",
    //   "properties":{
    //     "mode": "Incremental",
    //     "template":{
    //         "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    //         "contentVersion": "1.0.0.0",
    //         "resources": [
    //           {
    //             "type": "Microsoft.KeyVault/vaults/secrets",
    //             "apiVersion": "2016-10-01",
    //             "name": "[concat(variables('ext_kv_name'), '/', 'db_name')]",
    //             "location":"[resourceGroup().location]",
    //             "dependsOn": [
    //             ],
    //             "properties": {
    //               "attributes": {
    //                 "enabled": true
    //               },
    //               "value": "[variables('keyvault_secret_ext_db_name')]"
    //             }

    //           },
    //           {
    //             "type": "Microsoft.KeyVault/vaults/secrets",
    //             "apiVersion": "2016-10-01",
    //             "name": "[concat(variables('ext_kv_name'), '/', 'db_key')]",
    //             "location":"[resourceGroup().location]",
    //             "dependsOn": [
    //             ],
    //             "properties": {
    //               "attributes": {
    //                 "enabled": true
    //               },
    //               "value": "[variables('keyvault_secret_ext_db_key')]"
    //             }

    //           }
    //         ]
    //     }
    //   },
    //   "dependsOn": [
    //     "[resourceId('Microsoft.KeyVault/vaults', variables('vaults_ripa_kv_name'))]",
    //     "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseAccounts_ripa_cdb_name'))]"
    //   ]
    // },

    // todo: name
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02-preview",
      "location": "[resourceGroup().location]",
      "name": "[variables('components_ripa_ai_name')]",
      "dependsOn": [
        "[resourceId('microsoft.operationalinsights/workspaces', variables('workspaces_ripa_laws_name'))]"
      ],
      "kind": "web",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Insights/components'), parameters('user_tags')['Microsoft.Insights/components'], json('{}')))]",
      "properties": {
        "Application_Type": "web",
        "Flow_Type": "Redfield",
        "Request_Source": "IbizaAIExtension",
        "WorkspaceResourceId": "[resourceId('microsoft.operationalinsights/workspaces', variables('workspaces_ripa_laws_name'))]",
        "IngestionMode": "LogAnalytics",
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      }
    },
    //SecurityRule for Internet-Vnet-443
    {
      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
      "apiVersion": "2020-08-01",
      "name": "[concat(variables('networkSecurityGroups_ripa_apim_nsg_name'), '/Internet-Vnet-443')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroups_ripa_apim_nsg_name'))]"
      ],
      "properties": {
        "description": "Allows internet traffic only on 443 to access resources protected by this NSG",
        "protocol": "TCP",
        "sourcePortRange": "*",
        "destinationPortRange": "443",
        "sourceAddressPrefix": "Internet",
        "destinationAddressPrefix": "VirtualNetwork",
        "access": "Allow",
        "priority": 100,
        "direction": "Inbound",
        "sourcePortRanges": [],
        "destinationPortRanges": [],
        "sourceAddressPrefixes": [],
        "destinationAddressPrefixes": []
      }
    },
    //SecurityRule for ApiManagementVnet
    {
      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
      "apiVersion": "2020-08-01",
      "name": "[concat(variables('networkSecurityGroups_ripa_apim_nsg_name'), '/ApiManagementVnet')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroups_ripa_apim_nsg_name'))]"
      ],
      "properties": {
        "protocol": "TCP",
        "sourcePortRange": "*",
        "destinationPortRange": "3443",
        "sourceAddressPrefix": "ApiManagement",
        "destinationAddressPrefix": "VirtualNetwork",
        "access": "Allow",
        "priority": 200,
        "direction": "Inbound",
        "sourcePortRanges": [],
        "destinationPortRanges": [],
        "sourceAddressPrefixes": [],
        "destinationAddressPrefixes": []
      }
    },
    //SecurityRule for AzureLoadBalancerVnet
    {
      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
      "apiVersion": "2020-08-01",
      "name": "[concat(variables('networkSecurityGroups_ripa_apim_nsg_name'), '/AzureLoadBalancerVnet')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroups_ripa_apim_nsg_name'))]"
      ],
      "properties": {
        "protocol": "TCP",
        "sourcePortRange": "*",
        "destinationPortRange": "8080",
        "sourceAddressPrefix": "AzureLoadBalancer",
        "destinationAddressPrefix": "VirtualNetwork",
        "access": "Allow",
        "priority": 250,
        "direction": "Inbound",
        "sourcePortRanges": [],
        "destinationPortRanges": [],
        "sourceAddressPrefixes": [],
        "destinationAddressPrefixes": []
      }
    },
    //SecurityRule for VnetAzureActiveDirectory
    {
      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
      "apiVersion": "2020-08-01",
      "name": "[concat(variables('networkSecurityGroups_ripa_apim_nsg_name'), '/VnetAzureActiveDirectory')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroups_ripa_apim_nsg_name'))]"
      ],
      "properties": {
        "protocol": "TCP",
        "sourcePortRange": "*",
        "destinationPortRange": "443",
        "sourceAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefix": "AzureActiveDirectory",
        "access": "Allow",
        "priority": 210,
        "direction": "Outbound",
        "sourcePortRanges": [],
        "destinationPortRanges": [],
        "sourceAddressPrefixes": [],
        "destinationAddressPrefixes": []
      }
    },
    //SecurityRule for VnetAzureCloud
    {
      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
      "apiVersion": "2020-08-01",
      "name": "[concat(variables('networkSecurityGroups_ripa_apim_nsg_name'), '/VnetAzureCloud')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroups_ripa_apim_nsg_name'))]"
      ],
      "properties": {
        "protocol": "TCP",
        "sourcePortRange": "*",
        "sourceAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefix": "AzureCloud",
        "access": "Allow",
        "priority": 230,
        "direction": "Outbound",
        "sourcePortRanges": [],
        "destinationPortRanges": [ "443", "12000" ],
        "sourceAddressPrefixes": [],
        "destinationAddressPrefixes": []
      }
    },
    //SecurityRule for VnetAzureKeyVault
    {
      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
      "apiVersion": "2020-08-01",
      "name": "[concat(variables('networkSecurityGroups_ripa_apim_nsg_name'), '/VnetAzureKeyVault')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroups_ripa_apim_nsg_name'))]"
      ],
      "properties": {
        "protocol": "TCP",
        "sourcePortRange": "*",
        "destinationPortRange": "443",
        "sourceAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefix": "AzureKeyVault",
        "access": "Allow",
        "priority": 220,
        "direction": "Outbound",
        "sourcePortRanges": [],
        "destinationPortRanges": [],
        "sourceAddressPrefixes": [],
        "destinationAddressPrefixes": []
      }
    },
    //SecurityRule for VnetAzureMonitor
    {
      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
      "apiVersion": "2020-08-01",
      "name": "[concat(variables('networkSecurityGroups_ripa_apim_nsg_name'), '/VnetAzureMonitor')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroups_ripa_apim_nsg_name'))]"
      ],
      "properties": {
        "protocol": "TCP",
        "sourcePortRange": "*",
        "sourceAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefix": "AzureMonitor",
        "access": "Allow",
        "priority": 240,
        "direction": "Outbound",
        "sourcePortRanges": [],
        "destinationPortRanges": [ "443", "1886" ],
        "sourceAddressPrefixes": [],
        "destinationAddressPrefixes": []
      }
    },
    //SecurityRule for VnetStorage
    {
      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
      "apiVersion": "2020-08-01",
      "name": "[concat(variables('networkSecurityGroups_ripa_apim_nsg_name'), '/VnetStorage')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroups_ripa_apim_nsg_name'))]"
      ],
      "properties": {
        "protocol": "TCP",
        "sourcePortRange": "*",
        "destinationPortRange": "443",
        "sourceAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefix": "Storage",
        "access": "Allow",
        "priority": 200,
        "direction": "Outbound",
        "sourcePortRanges": [],
        "destinationPortRanges": [],
        "sourceAddressPrefixes": [],
        "destinationAddressPrefixes": []
      }
    },
    {
      "type": "Microsoft.Network/privateDnsZones/A",
      "apiVersion": "2018-09-01",
      "name": "[concat(variables('privateDnsZones_privatelink_documents_azure_com_name'), '/',variables('databaseAccounts_ripa_cdb_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZones_privatelink_documents_azure_com_name'))]"
      ],
      "properties": {
        "metadata": {
          "creator": "created by private endpoint sdsd-ripa-d-cdb-pe with resource guid 5ec440bf-79fb-48b0-bbd6-213a1302c193"
        },
        "ttl": 10,
        "aRecords": [
          {
            "ipv4Address": "[parameters('cdb_private_ipaddress1')]"
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/privateDnsZones/A",
      "apiVersion": "2018-09-01",
      "name": "[concat(variables('privateDnsZones_privatelink_documents_azure_com_name'), '/',variables('privatednszones_a_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZones_privatelink_documents_azure_com_name'))]"
      ],
      "properties": {
        "metadata": {
          "creator": "created by private endpoint with resource guid 5ec440bf-79fb-48b0-bbd6-213a1302c193"
        },
        "ttl": 10,
        "aRecords": [
          {
            "ipv4Address": "[parameters('cdb_private_ipaddress2')]"
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/privateDnsZones/SOA",
      "apiVersion": "2018-09-01",
      "name": "[concat(variables('privateDnsZones_privatelink_documents_azure_com_name'), '/', parameters('prv_dns_soa_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZones_privatelink_documents_azure_com_name'))]"
      ],
      "properties": {
        "ttl": 3600,
        "soaRecord": {
          "email": "azureprivatedns-host.microsoft.com",
          "expireTime": 2419200,
          "host": "azureprivatedns.us",
          "minimumTtl": 10,
          "refreshTime": 3600,
          "retryTime": 300,
          "serialNumber": 1
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storageAccounts_ripactsa_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripactsa_name'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": false
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storageAccounts_ripafnsa_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripafnsa_name'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": false
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storageAccounts_ripansgflsa_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripansgflsa_name'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": false
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storageAccounts_ripauisa_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripauisa_name'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": false
        },
        "staticWebsite": {
          "enabled": true,
          "indexDocument": "index.html"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storageAccounts_ripactsa_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripactsa_name'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storageAccounts_ripafnsa_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripafnsa_name'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storageAccounts_ripansgflsa_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripansgflsa_name'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storageAccounts_ripauisa_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripauisa_name'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/queueServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storageAccounts_ripactsa_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripactsa_name'))]"
      ],
      "properties": {
        "cors": {
          "corsRules": []
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/queueServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storageAccounts_ripafnsa_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripafnsa_name'))]"
      ],
      "properties": {
        "cors": {
          "corsRules": []
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/queueServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storageAccounts_ripansgflsa_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripansgflsa_name'))]"
      ],
      "properties": {
        "cors": {
          "corsRules": []
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/queueServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storageAccounts_ripauisa_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripauisa_name'))]"
      ],
      "properties": {
        "cors": {
          "corsRules": []
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/tableServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storageAccounts_ripactsa_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripactsa_name'))]"
      ],
      "properties": {
        "cors": {
          "corsRules": []
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/tableServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storageAccounts_ripafnsa_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripafnsa_name'))]"
      ],
      "properties": {
        "cors": {
          "corsRules": []
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/tableServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storageAccounts_ripansgflsa_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripansgflsa_name'))]"
      ],
      "properties": {
        "cors": {
          "corsRules": []
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/tableServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storageAccounts_ripauisa_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripauisa_name'))]"
      ],
      "properties": {
        "cors": {
          "corsRules": []
        }
      }
    },
    //CosmosDB PrivateEndpoint
    {
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2020-05-01",
      "name": "[variables('privateEndpoints_ripa_cdb_pe_name')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseAccounts_ripa_cdb_name'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworks_ripa_vnet_name'), concat(variables('virtualNetworks_ripa_vnet_name'), parameters('cdb_subnet_name')))]"
      ],
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/privateEndpoints'), parameters('user_tags')['Microsoft.Network/privateEndpoints'], json('{}')))]",
      "properties": {
        "privateLinkServiceConnections": [
          {
            "name": "[variables('privateEndpoints_ripa_cdb_pe_name')]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseAccounts_ripa_cdb_name'))]",
              "groupIds": [ "Sql" ],
              "privateLinkServiceConnectionState": {
                "status": "Approved",
                "actionsRequired": "None"
              }
            }
          }
        ],
        "manualPrivateLinkServiceConnections": [],
        // "networkInterfaces": [
        //     {
        //         "id": "[resourceId('Microsoft.Network/networkInterfaces/', variables('networkInt_cdb_name'))]"
        //     }
        // ],
        "subnet": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworks_ripa_vnet_name'), concat(variables('virtualNetworks_ripa_vnet_name'), parameters('cdb_subnet_name')))]"
        },
        "customDnsConfigs": []
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2020-05-01",
      "name": "[concat(variables('privateEndpoints_ripa_cdb_pe_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpoints_ripa_cdb_pe_name'))]",
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZones_privatelink_documents_azure_com_name'))]"
      ],
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "privatelink-documents-azure-us",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZones_privatelink_documents_azure_com_name'))]"
            }
          }
        ]
      }
    },
    //CosmosDB userprofile container
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2020-09-01",
      "name": "[concat(variables('databaseAccounts_ripa_cdb_name'), '/', parameters('dbaccount_sqlDb_name'),'/', parameters('dbaccount_sqlDb_user_container_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('databaseAccounts_ripa_cdb_name'), parameters('dbaccount_sqlDb_name'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseAccounts_ripa_cdb_name'))]"
      ],
      "properties": {
        "resource": {
          "id": "[parameters('dbaccount_sqlDb_user_container_name')]",
          "indexingPolicy": {
            "indexingMode": "consistent",
            "automatic": true,
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "partitionKey": {
            "paths": [ "/id" ],
            "kind": "Hash"
          },
          "uniqueKeyPolicy": {
            "uniqueKeys": []
          },
          "conflictResolutionPolicy": {
            "mode": "LastWriterWins",
            "conflictResolutionPath": "/_ts"
          }
        }
      }
    },
    //CosmosDB stop container
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2020-09-01",
      "name": "[concat(variables('databaseAccounts_ripa_cdb_name'), '/', parameters('dbaccount_sqlDb_name'),'/', parameters('dbaccount_sqlDb_stop_container_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('databaseAccounts_ripa_cdb_name'), parameters('dbaccount_sqlDb_name'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseAccounts_ripa_cdb_name'))]"
      ],
      "properties": {
        "resource": {
          "id": "[parameters('dbaccount_sqlDb_stop_container_name')]",
          "indexingPolicy": {
            "indexingMode": "consistent",
            "automatic": true,
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "partitionKey": {
            "paths": [ "/id" ],
            "kind": "Hash"
          },
          "uniqueKeyPolicy": {
            "uniqueKeys": []
          },
          "conflictResolutionPolicy": {
            "mode": "LastWriterWins",
            "conflictResolutionPath": "/_ts"
          }
        }
      }
    },
    //cosmosDB submission container
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2020-09-01",
      "name": "[concat(variables('databaseAccounts_ripa_cdb_name'), '/', parameters('dbaccount_sqlDb_name'),'/', parameters('dbaccount_sqlDb_submission_container_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('databaseAccounts_ripa_cdb_name'), parameters('dbaccount_sqlDb_name'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseAccounts_ripa_cdb_name'))]"
      ],
      "properties": {
        "resource": {
          "id": "[parameters('dbaccount_sqlDb_submission_container_name')]",
          "indexingPolicy": {
            "indexingMode": "consistent",
            "automatic": true,
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "partitionKey": {
            "paths": [ "/id" ],
            "kind": "Hash"
          },
          "uniqueKeyPolicy": {
            "uniqueKeys": []
          },
          "conflictResolutionPolicy": {
            "mode": "LastWriterWins",
            "conflictResolutionPath": "/_ts"
          }
        }
      }
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2018-09-01",
      "name": "[concat(variables('privateDnsZones_privatelink_documents_azure_com_name'), '/', parameters('privateDnsZones_vnetlink_name'))]",
      "location": "[parameters('glocation')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZones_privatelink_documents_azure_com_name'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworks_ripa_vnet_name'))]"
      ],
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworks_ripa_vnet_name'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-08-01",
      "name": "[variables('virtualNetworks_ripa_vnet_name')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroups_ripa_apim_nsg_name'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroups_ripa_vnet_cdb_subnet_nsg_name'))]"
      ],
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Network/virtualNetworks'), parameters('user_tags')['Microsoft.Network/virtualNetworks'], json('{}')))]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": "[parameters('Vnet_addressprefixes')]"
        },
        "subnets": [
          {
            "name": "[concat(variables('virtualNetworks_ripa_vnet_name'), parameters('apim_subnet_name'))]",
            "properties": {
              "addressPrefix": "[parameters('apim_subnet_addressprefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroups_ripa_apim_nsg_name'))]"
              },
              "delegations": [],
              "privateEndpointNetworkPolicies": "Enabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          },
          {
            "name": "[concat(variables('virtualNetworks_ripa_vnet_name'), parameters('cdb_subnet_name'))]",
            "properties": {
              "addressPrefix": "[parameters('cdb_subnet_addressprefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroups_ripa_vnet_cdb_subnet_nsg_name'))]"
              },
              "delegations": [],
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          }
        ],
        "virtualNetworkPeerings": [],
        "enableDdosProtection": false
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2020-08-01",
      "name": "[concat(variables('virtualNetworks_ripa_vnet_name'), '/', variables('virtualNetworks_ripa_vnet_name'), parameters('apim_subnet_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworks_ripa_vnet_name'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroups_ripa_apim_nsg_name'))]"
      ],
      "properties": {
        "addressPrefix": "[parameters('apim_subnet_addressprefix')]",
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroups_ripa_apim_nsg_name'))]"
        },
        "delegations": [],
        "privateEndpointNetworkPolicies": "Enabled",
        "privateLinkServiceNetworkPolicies": "Enabled"
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2020-08-01",
      "name": "[concat(variables('virtualNetworks_ripa_vnet_name'), '/', variables('virtualNetworks_ripa_vnet_name'), parameters('cdb_subnet_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworks_ripa_vnet_name'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroups_ripa_vnet_cdb_subnet_nsg_name'))]"
      ],
      "properties": {
        "addressPrefix": "[parameters('cdb_subnet_addressprefix')]",
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroups_ripa_vnet_cdb_subnet_nsg_name'))]"
        },
        "delegations": [],
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled"
      }
    },
    // UserProfile Function app
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "name": "[variables('sites_ripa_user_fa_name')]",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('serverfarms_userprofile_ASP_riparg_af76_name'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripafnsa_name'))]",
        "[resourceId('microsoft.insights/components', variables('components_ripa_ai_name'))]",
        "[resourceId('Microsoft.DocumentDb/databaseAccounts', variables('databaseAccounts_ripa_cdb_name'))]"
      ],
      "kind": "functionapp,linux",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Web/sites'), parameters('user_tags')['Microsoft.Web/sites'], json('{}')))]",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[concat(variables('sites_ripa_user_fa_name'), parameters('fa_hostnamessl_ep_suff'))]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(variables('sites_ripa_user_fa_name'), parameters('fa_hostnamessl_scm_ep_suff'))]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('serverfarms_userprofile_ASP_riparg_af76_name'))]",
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "siteConfig": {
          "appSettings": [
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccounts_ripafnsa_name'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripafnsa_name')), '2019-06-01').keys[0].value,';EndpointSuffix=', parameters('storage_ep_suff'))]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(concat('microsoft.insights/components/', variables('components_ripa_ai_name'))).InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(concat('microsoft.insights/components/', variables('components_ripa_ai_name'))).ConnectionString]"
            },
            {
              "name": "Account",
              "value": "[reference(resourceId('Microsoft.DocumentDb/databaseAccounts', variables('databaseAccounts_ripa_cdb_name'))).documentEndpoint]"
            },
            {
              "name": "ContainerName",
              "value": "[parameters('dbaccount_sqlDb_user_container_name')]"
            },
            {
              "name": "DatabaseName",
              "value": "[parameters('dbaccount_sqlDb_name')]"
            },
            {
              "name": "Key",
              "value": "[variables('user_fa_keyvault_referencestring')]"
            },
            {
              "name": "ripa_app_id",
              "value": "[parameters('auth_app_id')]"
            },
            {
              "name": "ripa_tenant_id",
              "value": "[parameters('auth_tenant_id')]"
            },
            {
              "name": "ripa_tenant_name",
              "value": "[parameters('auth_fqdn')]"
            }
          ],
          "use32BitWorkerProcess": "[parameters('use32BitWorkerProcess')]",
          "linuxFxVersion": "[parameters('linuxFxVersion')]",
          "scmIpSecurityRestrictionsUseMain": true
        },
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": false,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 1536,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "redundancyMode": "None"
      }
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2018-11-01",
      "name": "[concat(variables('sites_ripa_user_fa_name'), '/web')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('sites_ripa_user_fa_name'))]"
      ],
      "properties": {
        "numberOfWorkers": 1,
        "defaultDocuments": [],
        "netFrameworkVersion": "v4.0",
        "linuxFxVersion": "[parameters('linuxFxVersion')]",
        "requestTracingEnabled": false,
        "remoteDebuggingEnabled": false,
        "httpLoggingEnabled": false,
        "remoteDebuggingVersion": "VS2019",
        "logsDirectorySizeLimit": 35,
        "detailedErrorLoggingEnabled": false,
        "publishingUsername": "$variables('sites_ripa_user_fa_name')",
        "azureStorageAccounts": {},
        "scmType": "None",
        "use32BitWorkerProcess": false,
        "webSocketsEnabled": false,
        "alwaysOn": false,
        "managedPipelineMode": "Integrated",
        "virtualApplications": [
          {
            "virtualPath": "/",
            "physicalPath": "site\\wwwroot",
            "preloadEnabled": false
          }
        ],
        "loadBalancing": "LeastRequests",
        "experiments": {
          "rampUpRules": []
        },
        "autoHealEnabled": false,
        "cors": {
          "allowedOrigins": [ "*" ],
          "supportCredentials": false
        },
        "localMySqlEnabled": false,
        "ipSecurityRestrictions": [
          {
            "ipAddress": "[concat(first(reference(concat('Microsoft.ApiManagement/service/',  variables('service_ripa_apim_wus2_name')), '2019-12-01','Full').properties.publicIpAddresses),'/32')]",
            "action": "Allow",
            "priority": 100,
            "name": "Apim-publicIp",
            "description": "Allow Apim PublicIp"
          },
          {
            "ipAddress": "0.0.0.0/0",
            "action": "Deny",
            "tag": "Default",
            "priority": 1000,
            "name": "NoInternet",
            "description": "Stop all Internet traffic"
          },
          {
            "ipAddress": "Any",
            "action": "Deny",
            "priority": 2147483647,
            "name": "Deny all",
            "description": "Deny all access"
          }
        ],
        "scmIpSecurityRestrictionsUseMain": true,
        "http20Enabled": false,
        "minTlsVersion": "1.2",
        "ftpsState": "AllAllowed",
        "reservedInstanceCount": 0
      }
    },
    {
      "type": "Microsoft.Web/sites/hostNameBindings",
      "apiVersion": "2018-11-01",
      "name": "[concat(variables('sites_ripa_user_fa_name'), '/', variables('sites_ripa_user_fa_name'), parameters('fa_hostnamessl_ep_suff'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('sites_ripa_user_fa_name'))]"
      ],
      "properties": {
        "siteName": "[variables('sites_ripa_user_fa_name')]",
        "hostNameType": "Verified"
      }
    },
    // domain Function app
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "name": "[variables('sites_ripa_domain_fa_name')]",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('serverfarms_domain_ASP_riparg_af76_name'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripafnsa_name'))]",
        "[resourceId('microsoft.insights/components', variables('components_ripa_ai_name'))]"
      ],
      "kind": "functionapp,linux",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Web/sites'), parameters('user_tags')['Microsoft.Web/sites'], json('{}')))]",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[concat(variables('sites_ripa_domain_fa_name'), parameters('fa_hostnamessl_ep_suff'))]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(variables('sites_ripa_domain_fa_name'), parameters('fa_hostnamessl_scm_ep_suff'))]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('serverfarms_domain_ASP_riparg_af76_name'))]",
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "siteConfig": {
          "appSettings": [
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccounts_ripafnsa_name'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripafnsa_name')), '2019-06-01').keys[0].value,';EndpointSuffix=', parameters('storage_ep_suff'))]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(concat('microsoft.insights/components/', variables('components_ripa_ai_name'))).InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(concat('microsoft.insights/components/', variables('components_ripa_ai_name'))).ConnectionString]"
            },
            {
              "name": "RipaStorage",
              "value": "[variables('keyvault_secret_ripa_storage')]"
            },
            {
              "name": "ripa_app_id",
              "value": "[parameters('auth_app_id')]"
            },
            {
              "name": "ripa_tenant_id",
              "value": "[parameters('auth_tenant_id')]"
            },
            {
              "name": "ripa_tenant_name",
              "value": "[parameters('auth_fqdn')]"
            }
          ],
          "use32BitWorkerProcess": "[parameters('use32BitWorkerProcess')]",
          "linuxFxVersion": "[parameters('linuxFxVersion')]",
          "scmIpSecurityRestrictionsUseMain": true
        },
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": false,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 1536,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "redundancyMode": "None"
      }
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2018-11-01",
      "name": "[concat(variables('sites_ripa_domain_fa_name'), '/web')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('sites_ripa_domain_fa_name'))]"
      ],
      "properties": {
        "numberOfWorkers": 1,
        "defaultDocuments": [],
        "netFrameworkVersion": "v4.0",
        "linuxFxVersion": "[parameters('linuxFxVersion')]",
        "requestTracingEnabled": false,
        "remoteDebuggingEnabled": false,
        "httpLoggingEnabled": false,
        "remoteDebuggingVersion": "VS2019",
        "logsDirectorySizeLimit": 35,
        "detailedErrorLoggingEnabled": false,
        "publishingUsername": "$variables('sites_ripa_domain_fa_name')",
        "azureStorageAccounts": {},
        "scmType": "None",
        "use32BitWorkerProcess": false,
        "webSocketsEnabled": false,
        "alwaysOn": false,
        "managedPipelineMode": "Integrated",
        "virtualApplications": [
          {
            "virtualPath": "/",
            "physicalPath": "site\\wwwroot",
            "preloadEnabled": false
          }
        ],
        "loadBalancing": "LeastRequests",
        "experiments": {
          "rampUpRules": []
        },
        "autoHealEnabled": false,
        "cors": {
          "allowedOrigins": [ "*" ],
          "supportCredentials": false
        },
        "localMySqlEnabled": false,
        "ipSecurityRestrictions": [
          {
            "ipAddress": "[concat(first(reference(concat('Microsoft.ApiManagement/service/',  variables('service_ripa_apim_wus2_name')), '2019-12-01','Full').properties.publicIpAddresses),'/32')]",
            "action": "Allow",
            "priority": 100,
            "name": "Apim-publicIp",
            "description": "Allow Apim PublicIp"
          },
          {
            "ipAddress": "0.0.0.0/0",
            "action": "Deny",
            "tag": "Default",
            "priority": 1000,
            "name": "NoInternet",
            "description": "Stop all Internet traffic"
          },
          {
            "ipAddress": "Any",
            "action": "Deny",
            "priority": 2147483647,
            "name": "Deny all",
            "description": "Deny all access"
          }
        ],
        "scmIpSecurityRestrictionsUseMain": true,
        "http20Enabled": false,
        "minTlsVersion": "1.2",
        "ftpsState": "AllAllowed",
        "reservedInstanceCount": 0
      }
    },
    {
      "type": "Microsoft.Web/sites/hostNameBindings",
      "apiVersion": "2018-11-01",
      "name": "[concat(variables('sites_ripa_domain_fa_name'), '/', variables('sites_ripa_domain_fa_name'), parameters('fa_hostnamessl_ep_suff'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('sites_ripa_domain_fa_name'))]"
      ],
      "properties": {
        "siteName": "[variables('sites_ripa_domain_fa_name')]",
        "hostNameType": "Verified"
      }
    },
    // stop Function app
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "name": "[variables('sites_ripa_stop_fa_name')]",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('serverfarms_stop_ASP_riparg_af76_name'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripafnsa_name'))]",
        "[resourceId('microsoft.insights/components', variables('components_ripa_ai_name'))]",
        "[resourceId('Microsoft.DocumentDb/databaseAccounts', variables('databaseAccounts_ripa_cdb_name'))]"
      ],
      "kind": "functionapp,linux",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Web/sites'), parameters('user_tags')['Microsoft.Web/sites'], json('{}')))]",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[concat(variables('sites_ripa_stop_fa_name'), parameters('fa_hostnamessl_ep_suff'))]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(variables('sites_ripa_stop_fa_name'), parameters('fa_hostnamessl_scm_ep_suff'))]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('serverfarms_stop_ASP_riparg_af76_name'))]",
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "siteConfig": {
          "appSettings": [
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccounts_ripafnsa_name'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripafnsa_name')), '2019-06-01').keys[0].value,';EndpointSuffix=', parameters('storage_ep_suff'))]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(concat('microsoft.insights/components/', variables('components_ripa_ai_name'))).InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(concat('microsoft.insights/components/', variables('components_ripa_ai_name'))).ConnectionString]"
            },
            {
              "name": "Account",
              "value": "[reference(resourceId('Microsoft.DocumentDb/databaseAccounts', variables('databaseAccounts_ripa_cdb_name'))).documentEndpoint]"
            },
            {
              "name": "StopContainerName",
              "value": "[parameters('dbaccount_sqlDb_stop_container_name')]"
            },
            {
              "name": "StopAuditContainerName",
              "value": "[parameters('dbaccount_sqlDb_stop_audit_container_name')]"
            },
            {
              "name": "UserProfileContainerName",
              "value": "[parameters('dbaccount_sqlDb_user_container_name')]"
            },
            {
              "name": "CosmosConnectionString",
              "value": "[variables('keyvault_secret_cosmos_connection_string')]"
            },
            {
              "name": "DatabaseName",
              "value": "[parameters('dbaccount_sqlDb_name')]"
            },
            {
              "name": "Key",
              "value": "[variables('user_fa_keyvault_referencestring')]"
            },
            {
              "name": "ORI",
              "value": "[parameters('agency_ori')]"
            },
            {
              "name": "ripa_app_id",
              "value": "[parameters('auth_app_id')]"
            },
            {
              "name": "ripa_tenant_id",
              "value": "[parameters('auth_tenant_id')]"
            },
            {
              "name": "ripa_tenant_name",
              "value": "[parameters('auth_fqdn')]"
            },
            {
              "name": "RetryAttemps",
              "value": "3"
            },
            {
              "name": "RetryWait",
              "value": "1000"
            }
          ],
          "use32BitWorkerProcess": "[parameters('use32BitWorkerProcess')]",
          "linuxFxVersion": "[parameters('linuxFxVersion')]",
          "scmIpSecurityRestrictionsUseMain": true
        },
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": false,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 1536,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "redundancyMode": "None"
      }
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2018-11-01",
      "name": "[concat(variables('sites_ripa_stop_fa_name'), '/web')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('sites_ripa_stop_fa_name'))]"
      ],
      "properties": {
        "numberOfWorkers": 1,
        "defaultDocuments": [],
        "netFrameworkVersion": "v4.0",
        "linuxFxVersion": "[parameters('linuxFxVersion')]",
        "requestTracingEnabled": false,
        "remoteDebuggingEnabled": false,
        "httpLoggingEnabled": false,
        "remoteDebuggingVersion": "VS2019",
        "logsDirectorySizeLimit": 35,
        "detailedErrorLoggingEnabled": false,
        "publishingUsername": "$variables('sites_ripa_stop_fa_name')",
        "azureStorageAccounts": {},
        "scmType": "None",
        "use32BitWorkerProcess": false,
        "webSocketsEnabled": false,
        "alwaysOn": false,
        "managedPipelineMode": "Integrated",
        "virtualApplications": [
          {
            "virtualPath": "/",
            "physicalPath": "site\\wwwroot",
            "preloadEnabled": false
          }
        ],
        "loadBalancing": "LeastRequests",
        "experiments": {
          "rampUpRules": []
        },
        "autoHealEnabled": false,
        "cors": {
          "allowedOrigins": [ "*" ],
          "supportCredentials": false
        },
        "localMySqlEnabled": false,
        "ipSecurityRestrictions": [
          {
            "ipAddress": "[concat(first(reference(concat('Microsoft.ApiManagement/service/',  variables('service_ripa_apim_wus2_name')), '2019-12-01','Full').properties.publicIpAddresses),'/32')]",
            "action": "Allow",
            "priority": 100,
            "name": "Apim-publicIp",
            "description": "Allow Apim PublicIp"
          },
          {
            "ipAddress": "0.0.0.0/0",
            "action": "Deny",
            "tag": "Default",
            "priority": 1000,
            "name": "NoInternet",
            "description": "Stop all Internet traffic"
          },
          {
            "ipAddress": "Any",
            "action": "Deny",
            "priority": 2147483647,
            "name": "Deny all",
            "description": "Deny all access"
          }
        ],
        "scmIpSecurityRestrictionsUseMain": true,
        "http20Enabled": false,
        "minTlsVersion": "1.2",
        "ftpsState": "AllAllowed",
        "reservedInstanceCount": 0
      }
    },
    {
      "type": "Microsoft.Web/sites/hostNameBindings",
      "apiVersion": "2018-11-01",
      "name": "[concat(variables('sites_ripa_stop_fa_name'), '/', variables('sites_ripa_stop_fa_name'), parameters('fa_hostnamessl_ep_suff'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('sites_ripa_stop_fa_name'))]"
      ],
      "properties": {
        "siteName": "[variables('sites_ripa_stop_fa_name')]",
        "hostNameType": "Verified"
      }
    },
    // submission Function app
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "name": "[variables('sites_ripa_submission_fa_name')]",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('serverfarms_submission_ASP_riparg_af76_name'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripafnsa_name'))]",
        "[resourceId('microsoft.insights/components', variables('components_ripa_ai_name'))]",
        "[resourceId('Microsoft.DocumentDb/databaseAccounts', variables('databaseAccounts_ripa_cdb_name'))]"
      ],
      "kind": "functionapp,linux",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Web/sites'), parameters('user_tags')['Microsoft.Web/sites'], json('{}')))]",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[concat(variables('sites_ripa_submission_fa_name'), parameters('fa_hostnamessl_ep_suff'))]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(variables('sites_ripa_submission_fa_name'), parameters('fa_hostnamessl_scm_ep_suff'))]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('serverfarms_submission_ASP_riparg_af76_name'))]",
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "siteConfig": {
          "appSettings": [
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "AzureWebJobs.ServiceBusSubmissionConsumer.Disabled",
              "value": "true"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccounts_ripafnsa_name'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripafnsa_name')), '2019-06-01').keys[0].value,';EndpointSuffix=', parameters('storage_ep_suff'))]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(concat('microsoft.insights/components/', variables('components_ripa_ai_name'))).InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(concat('microsoft.insights/components/', variables('components_ripa_ai_name'))).ConnectionString]"
            },
            {
              "name": "Account",
              "value": "[reference(resourceId('Microsoft.DocumentDb/databaseAccounts', variables('databaseAccounts_ripa_cdb_name'))).documentEndpoint]"
            },
            {
              "name": "DatabaseName",
              "value": "[parameters('dbaccount_sqlDb_name')]"
            },
            {
              "name": "Key",
              "value": "[variables('user_fa_keyvault_referencestring')]"
            },
            {
              "name": "ContainerNameSubmissions",
              "value": "[parameters('dbaccount_sqlDb_submission_container_name')]"
            },
            {
              "name": "ContainerNameStops",
              "value": "[parameters('dbaccount_sqlDb_stop_container_name')]"
            },
            {
              "name": "ContainerPrefixSubmissions",
              "value": "[parameters('submission_fa_config_storage_container_prefix_submissions')]"
            },
            {
              "name": "ContainerPrefixResults",
              "value": "[parameters('submission_fa_config_storage_container_prefix_results')]"
            },
            {
              "name": "ContainerPrefixCpra",
              "value": "[parameters('submission_fa_config_storage_container_prefix_cpra')]"
            },
            {
              "name": "UserProfileContainerName",
              "value": "[parameters('dbaccount_sqlDb_user_container_name')]"
            },
            {
              "name": "RipaStorage",
              "value": "[variables('keyvault_secret_ripa_storage')]"
            },
            {
              "name": "SftpInputPath",
              "value": "[variables('doj_inbound_folder')]"
            },
            {
              "name": "SftpOutputPath",
              "value": "[variables('doj_outbound_folder')]"
            },
            {
              "name": "SftpPort",
              "value": "[parameters('submission_fa_config_sftp_port')]"
            },
            {
              "name": "SftpHost",
              "value": "[variables('keyvault_secret_sftp_host')]"
            },
            {
              "name": "SftpUserName",
              "value": "[variables('keyvault_secret_sftp_username')]"
            },
            {
              "name": "SftpPassword",
              "value": "[variables('keyvault_secret_sftp_password')]"
            },
            {
              "name": "SftpKey",
              "value": "[variables('keyvault_secret_sftp_key')]"
            },
            {
              "name": "SftpDisabled",
              "value": "[parameters('doj_sftp_disabled')]"
            },
            {
              "name": "ripa_app_id",
              "value": "[parameters('auth_app_id')]"
            },
            {
              "name": "ripa_tenant_id",
              "value": "[parameters('auth_tenant_id')]"
            },
            {
              "name": "ripa_tenant_name",
              "value": "[parameters('auth_fqdn')]"
            },
            {
              "name": "ServiceBusConnection",
              "value": "[variables('keyvault_secret_servicebus_connection_string')]"
            }
          ],
          "use32BitWorkerProcess": "[parameters('use32BitWorkerProcess')]",
          "linuxFxVersion": "[parameters('linuxFxVersion')]",
          "scmIpSecurityRestrictionsUseMain": true,
          "numberOfWorkers": 1
        },
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": false,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 1536,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "redundancyMode": "None"
      }
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2018-11-01",
      "name": "[concat(variables('sites_ripa_submission_fa_name'), '/web')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('sites_ripa_submission_fa_name'))]"
      ],
      "properties": {
        "numberOfWorkers": 1,
        "defaultDocuments": [],
        "netFrameworkVersion": "v4.0",
        "linuxFxVersion": "[parameters('linuxFxVersion')]",
        "requestTracingEnabled": false,
        "remoteDebuggingEnabled": false,
        "httpLoggingEnabled": false,
        "remoteDebuggingVersion": "VS2019",
        "logsDirectorySizeLimit": 35,
        "detailedErrorLoggingEnabled": false,
        "publishingUsername": "$variables('sites_ripa_submission_fa_name')",
        "azureStorageAccounts": {},
        "scmType": "None",
        "use32BitWorkerProcess": false,
        "webSocketsEnabled": false,
        "alwaysOn": false,
        "managedPipelineMode": "Integrated",
        "virtualApplications": [
          {
            "virtualPath": "/",
            "physicalPath": "site\\wwwroot",
            "preloadEnabled": false
          }
        ],
        "loadBalancing": "LeastRequests",
        "experiments": {
          "rampUpRules": []
        },
        "autoHealEnabled": false,
        "cors": {
          "allowedOrigins": [ "*" ],
          "supportCredentials": false
        },
        "localMySqlEnabled": false,
        "ipSecurityRestrictions": [
          {
            "ipAddress": "[concat(first(reference(concat('Microsoft.ApiManagement/service/',  variables('service_ripa_apim_wus2_name')), '2019-12-01','Full').properties.publicIpAddresses),'/32')]",
            "action": "Allow",
            "priority": 100,
            "name": "Apim-publicIp",
            "description": "Allow Apim PublicIp"
          },
          {
            "ipAddress": "0.0.0.0/0",
            "action": "Deny",
            "tag": "Default",
            "priority": 1000,
            "name": "NoInternet",
            "description": "Stop all Internet traffic"
          },
          {
            "ipAddress": "Any",
            "action": "Deny",
            "priority": 2147483647,
            "name": "Deny all",
            "description": "Deny all access"
          }
        ],
        "scmIpSecurityRestrictionsUseMain": true,
        "http20Enabled": false,
        "minTlsVersion": "1.2",
        "ftpsState": "AllAllowed",
        "reservedInstanceCount": 0
      }
    },
    {
      "type": "Microsoft.Web/sites/hostNameBindings",
      "apiVersion": "2018-11-01",
      "name": "[concat(variables('sites_ripa_submission_fa_name'), '/', variables('sites_ripa_submission_fa_name'), parameters('fa_hostnamessl_ep_suff'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('sites_ripa_submission_fa_name'))]"
      ],
      "properties": {
        "siteName": "[variables('sites_ripa_submission_fa_name')]",
        "hostNameType": "Verified"
      }
    },
    // textanalytics Function app
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "name": "[variables('sites_ripa_textanalytics_fa_name')]",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('serverfarms_textanalytics_ASP_riparg_af76_name'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripafnsa_name'))]",
        "[resourceId('microsoft.insights/components', variables('components_ripa_ai_name'))]",
        "[resourceId('Microsoft.CognitiveServices/accounts', variables('TA_Name'))]"
      ],
      "kind": "functionapp,linux",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Web/sites'), parameters('user_tags')['Microsoft.Web/sites'], json('{}')))]",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[concat(variables('sites_ripa_textanalytics_fa_name'), parameters('fa_hostnamessl_ep_suff'))]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(variables('sites_ripa_textanalytics_fa_name'), parameters('fa_hostnamessl_scm_ep_suff'))]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('serverfarms_textanalytics_ASP_riparg_af76_name'))]",
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "siteConfig": {
          "appSettings": [
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccounts_ripafnsa_name'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripafnsa_name')), '2019-06-01').keys[0].value,';EndpointSuffix=', parameters('storage_ep_suff'))]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(concat('microsoft.insights/components/', variables('components_ripa_ai_name'))).InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(concat('microsoft.insights/components/', variables('components_ripa_ai_name'))).ConnectionString]"
            },
            {
              "name": "TextAnalyticsEndpoint",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('TA_Name'))).endpoint]"
            },
            {
              "name": "TextAnalyticsKey",
              "value": "[variables('textanalytics_fa_keyvault_referencestring')]"
            },
            {
              "name": "AllowedCategories",
              "value": "Age,Email,Person,PhoneNumber,Organization"
            },
            {
              "name": "MinimumConfidenceScore",
              "value": "80"
            },
            {
              "name": "ripa_app_id",
              "value": "[parameters('auth_app_id')]"
            },
            {
              "name": "ripa_tenant_id",
              "value": "[parameters('auth_tenant_id')]"
            },
            {
              "name": "ripa_tenant_name",
              "value": "[parameters('auth_fqdn')]"
            }
          ],
          "use32BitWorkerProcess": "[parameters('use32BitWorkerProcess')]",
          "linuxFxVersion": "[parameters('linuxFxVersion')]",
          "scmIpSecurityRestrictionsUseMain": true
        },
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": false,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 1536,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "redundancyMode": "None"
      }
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2018-11-01",
      "name": "[concat(variables('sites_ripa_textanalytics_fa_name'), '/web')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('sites_ripa_textanalytics_fa_name'))]"
      ],
      "properties": {
        "numberOfWorkers": 1,
        "defaultDocuments": [],
        "netFrameworkVersion": "v4.0",
        "linuxFxVersion": "[parameters('linuxFxVersion')]",
        "requestTracingEnabled": false,
        "remoteDebuggingEnabled": false,
        "httpLoggingEnabled": false,
        "remoteDebuggingVersion": "VS2019",
        "logsDirectorySizeLimit": 35,
        "detailedErrorLoggingEnabled": false,
        "publishingUsername": "$variables('sites_ripa_textanalytics_fa_name')",
        "azureStorageAccounts": {},
        "scmType": "None",
        "use32BitWorkerProcess": false,
        "webSocketsEnabled": false,
        "alwaysOn": false,
        "managedPipelineMode": "Integrated",
        "virtualApplications": [
          {
            "virtualPath": "/",
            "physicalPath": "site\\wwwroot",
            "preloadEnabled": false
          }
        ],
        "loadBalancing": "LeastRequests",
        "experiments": {
          "rampUpRules": []
        },
        "autoHealEnabled": false,
        "cors": {
          "allowedOrigins": [ "*" ],
          "supportCredentials": false
        },
        "localMySqlEnabled": false,
        "ipSecurityRestrictions": [
          {
            "ipAddress": "[concat(first(reference(concat('Microsoft.ApiManagement/service/',  variables('service_ripa_apim_wus2_name')), '2019-12-01','Full').properties.publicIpAddresses),'/32')]",
            "action": "Allow",
            "priority": 100,
            "name": "Apim-publicIp",
            "description": "Allow Apim PublicIp"
          },
          {
            "ipAddress": "0.0.0.0/0",
            "action": "Deny",
            "tag": "Default",
            "priority": 1000,
            "name": "NoInternet",
            "description": "Stop all Internet traffic"
          },
          {
            "ipAddress": "Any",
            "action": "Deny",
            "priority": 2147483647,
            "name": "Deny all",
            "description": "Deny all access"
          }
        ],
        "scmIpSecurityRestrictionsUseMain": true,
        "http20Enabled": false,
        "minTlsVersion": "1.2",
        "ftpsState": "AllAllowed",
        "reservedInstanceCount": 0
      }
    },
    {
      "type": "Microsoft.Web/sites/hostNameBindings",
      "apiVersion": "2018-11-01",
      "name": "[concat(variables('sites_ripa_textanalytics_fa_name'), '/', variables('sites_ripa_textanalytics_fa_name'), parameters('fa_hostnamessl_ep_suff'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('sites_ripa_textanalytics_fa_name'))]"
      ],
      "properties": {
        "siteName": "[variables('sites_ripa_textanalytics_fa_name')]",
        "hostNameType": "Verified"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-01-01",
      "name": "[concat(variables('storageAccounts_ripauisa_name'), '/default/$web')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccounts_ripauisa_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripauisa_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-01-01",
      "name": "[concat(variables('storageAccounts_ripafnsa_name'), '/default/azure-webjobs-hosts')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccounts_ripafnsa_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripafnsa_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-01-01",
      "name": "[concat(variables('storageAccounts_ripafnsa_name'), '/default/azure-webjobs-secrets')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccounts_ripafnsa_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripafnsa_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-01-01",
      "name": "[concat(variables('storageAccounts_ripansgflsa_name'), '/default/insights-logs-networksecuritygroupflowevent')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccounts_ripansgflsa_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripansgflsa_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-01-01",
      "name": "[concat(variables('storageAccounts_ripafnsa_name'), '/default/scm-releases')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccounts_ripafnsa_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_ripafnsa_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2017-04-18",
      "name": "[variables('TA_Name')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "S"
      },
      "kind": "TextAnalytics",
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.CognitiveServices/accounts'), parameters('user_tags')['Microsoft.CognitiveServices/accounts'], json('{}')))]",
      "properties": {
        "customSubDomainName": "[variables('TA_Name')]",
        "networkAcls": {
          "defaultAction": "Allow",
          "virtualNetworkRules": [],
          "ipRules": []
        },
        "privateEndpointConnections": [],
        "publicNetworkAccess": "Enabled"
      }
    },
    {
      // add Cosmos Key to dashboard via script
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "[concat(variables('sites_ripa_domain_fa_name'), '-', 'cssa-cosmos-dashboard-runonce-delete-me-dps')]",
      "location": "[resourceGroup().location]",
      "kind": "AzurePowerShell",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseAccounts_ripa_cdb_name'))]"
      ],
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Resources/deploymentScripts'), parameters('user_tags')['Microsoft.Resources/deploymentScripts'], json('{}')))]",
      "properties": {
        "forceUpdateTag": "newGuid()",
        "containerSettings": {
          "containerGroupName": "[concat(variables('sites_ripa_domain_fa_name'), '-', 'ext-cosmos-dashboard')]"
        },
        "azPowerShellVersion": "3.0",
        "environmentVariables": [
          {
            "name": "DASHBOARD_COSMOS_PRIMARY_KEY",
            "secureValue": "[listKeys(concat('Microsoft.DocumentDB/databaseAccounts/',  variables('databaseAccounts_ripa_cdb_name')), '2020-09-01').primaryMasterKey]"
          },
          {
            "name": "CSSA_SP_APP_ID",
            "secureValue": "#{CSSA_SP_APP_ID}#"
          },
          {
            "name": "CSSA_SP_SECRET",
            "secureValue": "#{CSSA_SP_SECRET}#"
          },
          {
            "name": "CSSA_TENANT_ID",
            "value": "#{CSSA_TENANT_ID}#"
          },
          {
            "name": "ETL_SUBSCRIPTION_ID",
            "value": "[variables('ext-dashboard-subscription-key')]"
          },
          {
            "name": "APPLICATION_NAME",
            "value": "[parameters('application')]"
          },
          {
            "name": "AGENCY_ABBREVIATION",
            "value": "[parameters('agency_abbreviation')]"
          },
          {
            "name": "ENVIRONMENT_TYPE",
            "value": "[parameters('environment_type')]"
          },
          {
            "name": "CSSA_DASHBOARD_KEY_VAULT_PREFIX",
            "value": "#{CSSA_DASHBOARD_KEY_VAULT_PREFIX}#"
          },
          {
            "name": "CSSA_DASHBOARD_KEY_VAULT_SUFFIX",
            "value": "#{CSSA_DASHBOARD_KEY_VAULT_SUFFIX}#"
          },
          {
            "name": "CSSA_DASHBOARD_KEY_VAULT_PROD",
            "value": "#{CSSA_DASHBOARD_KEY_VAULT_PROD}#"
          },
          {
            "name": "CSSA_DASHBOARD_SQL_SERVER_PREFIX",
            "value": "#{CSSA_DASHBOARD_SQL_SERVER_PREFIX}#"
          },
          {
            "name": "CSSA_DASHBOARD_SQL_SERVER_SUFFIX",
            "value": "#{CSSA_DASHBOARD_SQL_SERVER_SUFFIX}#"
          },
          {
            "name": "CSSA_DASHBOARD_SQL_SERVER_PROD",
            "value": "#{CSSA_DASHBOARD_SQL_SERVER_PROD}#"
          },
          {
            "name": "KV_SQL_SERVER_USER",
            "value": "#{KV_SQL_SERVER_USER}#"
          },
          {
            "name": "KV_SQL_SERVER_PWD",
            "value": "#{KV_SQL_SERVER_PWD}#"
          },
          {
            "name": "CSSA_DASHBOARD_RG_PREFIX",
            "value": "#{CSSA_DASHBOARD_RG_PREFIX}#"
          }
        ],
        "primaryScriptUri": "#{__TEMPLATE_VERSION_FORMATTED__-IMPORT-DASHBOARDDATA-PS1-SAS-URL}#",
        "supportingScriptUris": [],
        "timeout": "PT4H",
        "cleanupPreference": "OnExpiration",
        "retentionInterval": "PT4H"
      }
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "[concat(parameters('agency_abbreviation'), '-cssa-dns-subdomain-runonce-delete-me-dps')]",
      "location": "[resourceGroup().location]",
      "kind": "AzureCLI",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('storageAccounts_ripauisa_name'), 'default', '$web')]"
      ],
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Resources/deploymentScripts'), parameters('user_tags')['Microsoft.Resources/deploymentScripts'], json('{}')))]",
      "properties": {
        "forceUpdateTag": "newGuid()",
        "containerSettings": {
          "containerGroupName": "[concat(parameters('agency_abbreviation'), '-cssa-dns-subdomain-runonce-delete-me-dps')]"
        },
        "storageAccountSettings": {
          "storageAccountName": "#{CSSA_STORAGE_ACCOUNT_NAME}#",
          "storageAccountKey": "#{CSSA_STORAGE_ACCOUNT_KEY}#"
        },
        "azCliVersion": "2.23.0",
        "environmentVariables": [
          {
            "name": "CLOUD_TYPE",
            "value": "AzureUSGovernment"
          },
          {
            "name": "CSSA_SP_APP_ID",
            "secureValue": "#{CSSA_SP_APP_ID}#"
          },
          {
            "name": "CSSA_SP_SECRET",
            "secureValue": "#{CSSA_SP_SECRET}#"
          },
          {
            "name": "CSSA_TENANT_ID",
            "value": "#{CSSA_TENANT_ID}#"
          },
          {
            "name": "CSSA_SHD_SUBSCRIPTION_ID",
            "value": "#{CSSA_SHD_SUBSCRIPTION_ID}#"
          },
          {
            "name": "CSSA_RESOURCE_GROUP_NAME",
            "value": "#{CSSA_RESOURCE_GROUP_NAME}#"
          },
          {
            "name": "CSSA_CERT_KEY_VAULT_RG",
            "value": "#{CSSA_CERT_KEY_VAULT_RG}#"
          },
          {
            "name": "CSSA_CERT_KEY_VAULT_NAME",
            "value": "#{CSSA_CERT_KEY_VAULT_NAME}#"
          },
          {
            "name": "CSSA_CERT_SECRET_NAME",
            "value": "#{CSSA_CERT_SECRET_NAME}#"
          },
          {
            "name": "CSSA_CERT_SECRET_VERSION",
            "value": "#{CSSA_CERT_SECRET_VERSION}#"
          },
          {
            "name": "CSSA_CDN_PROFILE_NAME",
            "value": "#{CSSA_CDN_PROFILE_NAME}#"
          },
          {
            "name": "CSSA_DNS_ROOT_ZONE",
            "value": "#{CSSA_DNS_ROOT_ZONE}#"
          },
          {
            "name": "AGENCY_ORI",
            "value": "[parameters('agency_ori')]"
          },
          {
            "name": "AGENCY_ABBREVIATION",
            "value": "[parameters('agency_abbreviation')]"
          },
          {
            "name": "APPLICATION_SUBSCRIPTION_ID",
            "value": "[subscription().subscriptionId]"
          },
          {
            "name": "APPLICATION_RESOURCE_GROUP_NAME",
            "value": "[resourceGroup().Name]"
          },
          {
            "name": "APPLICATION_NAME",
            "value": "[parameters('application')]"
          },
          {
            "name": "APPLICATION_UI_SA_NAME",
            "value": "[variables('storageAccounts_ripauisa_name')]"
          },
          {
            "name": "APP_DOMAIN_TYPE",
            "value": "[parameters('app_domain_type')]"
          },
          {
            "name": "CUSTOM_PRIMARY_DOMAIN",
            "value": "[parameters('primary_domain')]"
          },
          {
            "name": "CUSTOM_APP_CNAME_ALIAS",
            "value": "[parameters('app_cname_alias')]"
          },
          {
            "name": "CUSTOM_CERT_KEY_VAULT_RID",
            "value": "[parameters('certificate_key_vault_rid')]"
          },
          {
            "name": "CUSTOM_CERT_SECRET_NAME",
            "value": "[parameters('certificate_secret_name')]"
          }
        ],
        "primaryScriptUri": "#{__TEMPLATE_VERSION_FORMATTED__-NEW-RIPA-CSSA-SUB-DOMAIN-SH-SAS-URL}#",
        "supportingScriptUris": [],
        "timeout": "PT4H",
        "cleanupPreference": "OnExpiration",
        "retentionInterval": "PT4H"
      }
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "[concat(parameters('agency_abbreviation'), '-cssa-app-import-runonce-delete-me-dps')]",
      "location": "[resourceGroup().location]",
      "kind": "AzurePowerShell",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('storageAccounts_ripauisa_name'), 'default', '$web')]",
        "[resourceId('Microsoft.Web/sites/config', variables('sites_ripa_domain_fa_name'), 'web')]",
        "[resourceId('Microsoft.Web/sites/config', variables('sites_ripa_stop_fa_name'), 'web')]",
        "[resourceId('Microsoft.Web/sites/config', variables('sites_ripa_submission_fa_name'), 'web')]",
        "[resourceId('Microsoft.Web/sites/config', variables('sites_ripa_textanalytics_fa_name'), 'web')]",
        "[resourceId('Microsoft.Web/sites/config', variables('sites_ripa_user_fa_name'), 'web')]",

        "[resourceId('Microsoft.ApiManagement/service/apis', variables('service_ripa_apim_wus2_name'), parameters('apim_apis_domain_name'))]",
        "[resourceId('Microsoft.ApiManagement/service/apis', variables('service_ripa_apim_wus2_name'), parameters('apim_apis_stop_name'))]",
        "[resourceId('Microsoft.ApiManagement/service/apis', variables('service_ripa_apim_wus2_name'), parameters('apim_apis_submission_name'))]",
        "[resourceId('Microsoft.ApiManagement/service/apis', variables('service_ripa_apim_wus2_name'), parameters('apim_apis_textAnalytics_name'))]",
        "[resourceId('Microsoft.ApiManagement/service/apis', variables('service_ripa_apim_wus2_name'), parameters('apim_apis_userprofile_name'))]"
      ],
      "tags": "[union(variables('default_tags'), if(contains(parameters('user_tags'), 'Microsoft.Resources/deploymentScripts'), parameters('user_tags')['Microsoft.Resources/deploymentScripts'], json('{}')))]",
      "properties": {
        "forceUpdateTag": "newGuid()",
        "containerSettings": {
          "containerGroupName": "[concat(parameters('agency_abbreviation'), '-cssa-app-import-runonce-delete-me-dps')]"
        },
        "storageAccountSettings": {
          "storageAccountName": "#{CSSA_STORAGE_ACCOUNT_NAME}#",
          "storageAccountKey": "#{CSSA_STORAGE_ACCOUNT_KEY}#"
        },
        "azPowerShellVersion": "3.0",
        "environmentVariables": [
          {
            "name": "CSSA_SP_APP_ID",
            "secureValue": "#{CSSA_SP_APP_ID}#"
          },
          {
            "name": "CSSA_SP_SECRET",
            "secureValue": "#{CSSA_SP_SECRET}#"
          },
          {
            "name": "CSSA_TENANT_ID",
            "value": "#{CSSA_TENANT_ID}#"
          },
          {
            "name": "APP_SUBSCRIPTION_ID",
            "value": "[subscription().subscriptionId]"
          },
          {
            "name": "APP_RESOURCE_GROUP_NAME",
            "value": "[resourceGroup().name]"
          },
          // {
          //   "name": "APIM_INSTANCE_NAME",
          //   "value": "[variables('service_ripa_apim_wus2_name')]"
          // },
          {
            "name": "AUTH_SP_APP_ID",
            "value": "[parameters('auth_app_id')]"
          },
          {
            "name": "AUTH_TENANT_ID",
            "value": "[parameters('auth_tenant_id')]"
          },
          {
            "name": "AUTH_AUTHORITY",
            "value": "[parameters('auth_authority')]"
          },
          {
            "name": "AUTH_PRIMARY_DOMAIN",
            "value": "[parameters('auth_fqdn')]"
          },
          // {
          //   "name": "APIM_INSTANCE_URL",
          //   "value": "[reference(concat('Microsoft.ApiManagement/service/',  variables('service_ripa_apim_wus2_name')), '2019-12-01','Full').properties.gatewayUrl]"
          // },
          {
            "name": "AGENCY_ABBREVIATION",
            "value": "[parameters('agency_abbreviation')]"
          },
          {
            "name": "APPLICATION_NAME",
            "value": "[parameters('application')]"
          },
          // {
          //   "name": "STORAGE_ACCOUNT_NAME",
          //   "value": "[variables('storageAccounts_ripauisa_name')]"
          // },
          {
            "name": "DEFAULT_COUNTY",
            "value": "[parameters('agency_county')]"
          },
          {
            "name": "ENVIRONMENT_TYPE",
            "value": "[parameters('environment_type')]"
          },
          {
            "name": "ENABLE_BEATS",
            "value": "[parameters('enable_beats')]"
          },
          {
            "name": "MODIFY_BEAT_ID",
            "value": "[parameters('modify_beat_id')]"
          },
          {
            "name": "DISPLAY_REPORTING_EMAIL",
            "value": "[parameters('display_reporting_email')]"
          },
          {
            "name": "REPORTING_EMAIL_ADDRESS",
            "value": "[parameters('reporting_email_address')]"
          },
          {
            "name": "BEAT_ID_NUMBER_OF_DIGITS",
            "value": "[parameters('beat_id_number_of_digits')]"
          },
          {
            "name": "ENABLE_STOP_DEBUGGER",
            "value": "[parameters('enable_stop_debugger')]"
          },
          {
            "name": "USE_OFFICER_UPN",
            "value": "[parameters('use_officer_upn')]"
          },
          {
            "name": "DEPLOY_WEB_CONFIG_JSON",
            "value": "True"
          },
          {
            "name": "TEMPLATE_VERSION_FORMATTED",
            "value": "#{TEMPLATE_VERSION_FORMATTED}#"
          }
        ],
        "primaryScriptUri": "#{__TEMPLATE_VERSION_FORMATTED__-IMPORT-ALLRIPAAPPLICATIONS-PS1-SAS-URL}#",
        "supportingScriptUris": [
          "#{__TEMPLATE_VERSION_FORMATTED__-IMPORT-APIMAPIS-PSM1-SAS-URL}#",
          "#{__TEMPLATE_VERSION_FORMATTED__-NEW-FUNCTIONHOSTKEY-PSM1-SAS-URL}#",
          "#{__TEMPLATE_VERSION_FORMATTED__-NEW-RIPAAPIMBACKEND-PSM1-SAS-URL}#",
          "#{__TEMPLATE_VERSION_FORMATTED__-CONFIG-JSON-SAS-URL}#",
          "#{__TEMPLATE_VERSION_FORMATTED__-DOMAIN-ZIP-SAS-URL}#",
          "#{__TEMPLATE_VERSION_FORMATTED__-STOP-ZIP-SAS-URL}#",
          "#{__TEMPLATE_VERSION_FORMATTED__-SUBMISSION-ZIP-SAS-URL}#",
          "#{__TEMPLATE_VERSION_FORMATTED__-TEXTANALYTICS-ZIP-SAS-URL}#",
          "#{__TEMPLATE_VERSION_FORMATTED__-USERPROFILE-ZIP-SAS-URL}#",
          "#{__TEMPLATE_VERSION_FORMATTED__-UI-ZIP-SAS-URL}#"
        ],
        "timeout": "PT4H",
        "cleanupPreference": "OnExpiration",
        "retentionInterval": "PT4H"
      }
    }
  ],
  "outputs": {
    "resourcegroup_name": {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "key_vault_name": {
      "type": "string",
      "value": "[variables('vaults_ripa_kv_name')]"
    },
    "subscription": {
      "type": "object",
      "value": "[subscription()]"
    },
    "apim_name": {
      "type": "string",
      "value": "[variables('service_ripa_apim_wus2_name')]"
    },
    "apim_gateway_url": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ApiManagement/service', variables('service_ripa_apim_wus2_name')), '2019-12-01', 'Full').properties.gatewayUrl]"
    },
    "cosmosdb_name": {
      "type": "string",
      "value": "[variables('databaseAccounts_ripa_cdb_name')]"
    },
    "functionapp_name": {
      "type": "string",
      "value": "[variables('sites_ripa_user_fa_name')]"
    },
    "tags": {
      "type": "Object",
      "value": "[variables('default_tags')]"
    }
  }
}
